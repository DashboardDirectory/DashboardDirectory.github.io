(function (c) {
    function k(f, c, k, e, m) {
        this._listener = c;
        this._isOnce = k;
        this.context = e;
        this._signal = f;
        this._priority = m || 0
    }

    function e(f, c) {
        if ("function" !== typeof f)throw Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}", c));
    }

    function m() {
        this._bindings = [];
        this._prevParams = null;
        var f = this;
        this.dispatch = function () {
            m.prototype.dispatch.apply(f, arguments)
        }
    }

    k.prototype = {active: !0, params: null, execute: function (f) {
        var c;
        this.active && this._listener && (f = this.params ? this.params.concat(f) :
            f, c = this._listener.apply(this.context, f), this._isOnce && this.detach());
        return c
    }, detach: function () {
        return this.isBound() ? this._signal.remove(this._listener, this.context) : null
    }, isBound: function () {
        return!!this._signal && !!this._listener
    }, isOnce: function () {
        return this._isOnce
    }, getListener: function () {
        return this._listener
    }, getSignal: function () {
        return this._signal
    }, _destroy: function () {
        delete this._signal;
        delete this._listener;
        delete this.context
    }, toString: function () {
        return"[SignalBinding isOnce:" + this._isOnce +
            ", isBound:" + this.isBound() + ", active:" + this.active + "]"
    }};
    m.prototype = {VERSION: "1.0.0", memorize: !1, _shouldPropagate: !0, active: !0, _registerListener: function (f, c, e, m) {
        var C = this._indexOfListener(f, e);
        if (-1 !== C) {
            if (f = this._bindings[C], f.isOnce() !== c)throw Error("You cannot add" + (c ? "" : "Once") + "() then add" + (!c ? "" : "Once") + "() the same listener without removing the relationship first.");
        } else f = new k(this, f, c, e, m), this._addBinding(f);
        this.memorize && this._prevParams && f.execute(this._prevParams);
        return f
    },
        _addBinding: function (f) {
            var c = this._bindings.length;
            do--c; while (this._bindings[c] && f._priority <= this._bindings[c]._priority);
            this._bindings.splice(c + 1, 0, f)
        }, _indexOfListener: function (f, c) {
            for (var k = this._bindings.length, e; k--;)if (e = this._bindings[k], e._listener === f && e.context === c)return k;
            return-1
        }, has: function (f, c) {
            return-1 !== this._indexOfListener(f, c)
        }, add: function (f, c, k) {
            e(f, "add");
            return this._registerListener(f, !1, c, k)
        }, addOnce: function (f, c, k) {
            e(f, "addOnce");
            return this._registerListener(f, !0,
                c, k)
        }, remove: function (f, c) {
            e(f, "remove");
            var k = this._indexOfListener(f, c);
            -1 !== k && (this._bindings[k]._destroy(), this._bindings.splice(k, 1));
            return f
        }, removeAll: function () {
            for (var f = this._bindings.length; f--;)this._bindings[f]._destroy();
            this._bindings.length = 0
        }, getNumListeners: function () {
            return this._bindings.length
        }, halt: function () {
            this._shouldPropagate = !1
        }, dispatch: function (f) {
            if (this.active) {
                var c = Array.prototype.slice.call(arguments), k = this._bindings.length, e;
                this.memorize && (this._prevParams =
                    c);
                if (k) {
                    e = this._bindings.slice();
                    this._shouldPropagate = !0;
                    do k--; while (e[k] && this._shouldPropagate && !1 !== e[k].execute(c))
                }
            }
        }, forget: function () {
            this._prevParams = null
        }, dispose: function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams
        }, toString: function () {
            return"[Signal active:" + this.active + " numListeners:" + this.getNumListeners() + "]"
        }};
    var f = m;
    f.Signal = m;
    "function" === typeof define && define.amd ? define(function () {
        return f
    }) : "undefined" !== typeof module && module.exports ? module.exports = f : c.signals =
        f
})(this);
var OB = {updateAtInterval: new signals.Signal, displayInterval: new signals.Signal, start: new signals.Signal, stop: new signals.Signal, preStart: new signals.Signal, preStop: new signals.Signal, insert: new signals.Signal, update: new signals.Signal, reset: new signals.Signal, remove: new signals.Signal, removeAll: new signals.Signal, init: new signals.Signal, options: new signals.Signal, postItemRender: new signals.Signal, postAllItemRender: new signals.Signal, onLoad: new signals.Signal, onUnLoad: new signals.Signal, onBeforeUnLoad: new signals.Signal};
(function () {
    var c = this.Store = function (c, e) {
        var m;
        this.name = c;
        if (void 0 !== e)for (m in e)e.hasOwnProperty(m) && void 0 === this.get(m) && this.set(m, e[m])
    };
    c.prototype.get = function (c) {
        c = "store." + this.name + "." + c;
        if (!("null" === localStorage.getItem(c) || null === localStorage.getItem(c)))try {
            return JSON.parse(localStorage.getItem(c))
        } catch (e) {
            return null
        }
    };
    c.prototype.set = function (c, e) {
        if (void 0 === e)this.remove(c); else {
            if ("function" === typeof e)e = null; else try {
                e = JSON.stringify(e)
            } catch (m) {
                e = null
            }
            localStorage.setItem("store." +
                this.name + "." + c, e)
        }
        return this
    };
    c.prototype.remove = function (c) {
        localStorage.removeItem("store." + this.name + "." + c);
        return this
    };
    c.prototype.removeAll = function () {
        var c, e;
        c = "store." + this.name + ".";
        for (e = localStorage.length - 1; 0 <= e; e--)localStorage.key(e).substring(0, c.length) === c && localStorage.removeItem(localStorage.key(e));
        return this
    };
    c.prototype.toObject = function () {
        var c, e, m, f, q;
        c = {};
        e = "store." + this.name + ".";
        for (m = localStorage.length - 1; 0 <= m; m--)localStorage.key(m).substring(0, e.length) === e && (f = localStorage.key(m).substring(e.length),
            q = this.get(f), void 0 !== q && (c[f] = q));
        return c
    };
    c.prototype.fromObject = function (c, e) {
        !0 !== e && this.removeAll();
        for (var m in c)c.hasOwnProperty(m) && this.set(m, c[m]);
        return this
    }
})();
var BrowserDetect = {init: function () {
    this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
    this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
    this.OS = this.searchString(this.dataOS) || "an unknown OS"
}, searchString: function (c) {
    for (var k = 0; k < c.length; k++) {
        var e = c[k].string, m = c[k].prop;
        this.versionSearchString = c[k].versionSearch || c[k].identity;
        if (e) {
            if (-1 != e.indexOf(c[k].subString))return c[k].identity
        } else if (m)return c[k].identity
    }
},
    searchVersion: function (c) {
        var k = c.indexOf(this.versionSearchString);
        if (-1 != k)return parseFloat(c.substring(k + this.versionSearchString.length + 1))
    }, dataBrowser: [
        {string: navigator.userAgent, subString: "Chrome", identity: "Chrome"},
        {string: navigator.userAgent, subString: "OmniWeb", versionSearch: "OmniWeb/", identity: "OmniWeb"},
        {string: navigator.vendor, subString: "Apple", identity: "Safari", versionSearch: "Version"},
        {prop: window.opera, identity: "Opera", versionSearch: "Version"},
        {string: navigator.vendor, subString: "iCab",
            identity: "iCab"},
        {string: navigator.vendor, subString: "KDE", identity: "Konqueror"},
        {string: navigator.userAgent, subString: "Firefox", identity: "Firefox"},
        {string: navigator.vendor, subString: "Camino", identity: "Camino"},
        {string: navigator.userAgent, subString: "Netscape", identity: "Netscape"},
        {string: navigator.userAgent, subString: "MSIE", identity: "Explorer", versionSearch: "MSIE"},
        {string: navigator.userAgent, subString: "Gecko", identity: "Mozilla", versionSearch: "rv"},
        {string: navigator.userAgent, subString: "Mozilla",
            identity: "Netscape", versionSearch: "Mozilla"}
    ], dataOS: [
        {string: navigator.platform, subString: "Win", identity: "Windows"},
        {string: navigator.platform, subString: "Mac", identity: "Mac"},
        {string: navigator.userAgent, subString: "iPhone", identity: "iPhone/iPod"},
        {string: navigator.platform, subString: "Linux", identity: "Linux"}
    ]};
BrowserDetect.init();
var attask = function () {
    function c(a) {
        g.set("general", !1);
        var b = g.get("host").replace(/[|&;$%@"<>()+,]/g, ""), d = new Date;
        d.setHours(d.getHours() - d.getTimezoneOffset() / 60);
        var d = d.toJSON(), h = function (a) {
            a && (TASK_CNTRL.showWindow('<div class="content">' + a + '<div id="close" class="btn btn-primary" style="width:290px"><h3 style="line-height:0px">close</h3></div></div>'), jQuery("#close").unbind("click").click(function (a) {
                a.preventDefault();
                TASK_CNTRL.hideWindow()
            }))
        }, b = {url: "https://" + za + "/Tools/Subform/UsageTracker.aspx?f=Stopwatch",
            data: JSON.stringify({dateTime: d, activity: {request: b}, userID: g.get("userID"), username: g.get("username")}), dataType: "json", type: "POST"}, b = jQuery.ajax(b);
        b.done(function (b, d, f) {
            if (b.isValid) {
                try {
                    b.message = JSON.parse(b.message), b.isWarn && (console.log(b.message.message), b.message.message && h(b.message.message))
                } catch (c) {
                    !0 != g.get("is_auth") && (g.set("access", "demo"), g.set("is_auth", !1), b.message && h(b.message));
                    a && a();
                    console.log(b.message);
                    return
                }
                g.set("ent", !0);
                g.set("updateAtInterval", void 0 != b.message.updateAtInterval ?
                    b.message.updateAtInterval : !1);
                g.set("userHostName", b.message.userHostName);
                g.set("stopOnClose", void 0 != b.message.stopOnClose ? b.message.stopOnClose : !1);
                g.set("forceHourTypeID", b.message.forceHourTypeID);
                g.set("maxTaskTime", void 0 != b.message.maxTaskTime ? parseFloat(b.message.maxTaskTime) : 8.5);
                g.set("hideTaskButtons", void 0 != b.message.hideTaskButtons ? b.message.hideTaskButtons : !1);
                g.set("projectFilter", void 0 != b.message.projectFilter ? b.message.projectFilter : !0);
                g.set("personalTasks", void 0 != b.message.personalTasks ?
                    b.message.personalTasks : !0);
                g.get("hideTaskButtons") && g.set("sort", "project");
                jQuery("#licence").text("Enterprise");
                var e = function () {
                    g.set("is_auth", !0);
                    g.set("auth_key", !0);
                    b.message.apiKey && (g.set("password", null), g.set("apiKey", b.message.apiKey), g.set("sessionID", false));
                    a && a();
                    jQuery("#top-bar").show();
                    ca()
                };
                (void 0 != b.message.forceLogin ? b.message.forceLogin : 1) ? void 0 == g.get("sessionID") ? I(e) : e() : !g.get("userID") && g.get("username") ? (d = {url: t() + "user/search", type: "get", data: {fields: "ID", emailAddr: g.get("username"), apiKey: b.message.apiKey},
                    dataType: "json"}, jQuery.ajax(d).done(function (b) {
                    void 0 != b.error ? ($error.html(b.error.message), s.hide(), void 0 !== a && I(e)) : (b = b.data, b.length && g.get("password") == b[0].ID.slice(-6) ? (g.set("userID", b[0].ID), e()) : I(e))
                })) : e()
            } else!0 != g.get("is_auth") && (g.set("access", "demo"), g.set("is_auth", !1), console.log(b.message), b.message && h(b.message)), a && a()
        });
        b.fail(function (b, d, h) {
            a && a()
        })
    }

    function k(a) {
        g.set("updateAtInterval", !1);
        g.set("general", !0);
        if (g.get("ent"))c(a); else {
            var b = -1 == window.location.origin.indexOf("atappstore.com") ?
                "https://" + da : window.location.origin, d = g.get("qr") ? "shiftwatch-qr" : "stopwatch", b = {url: b + "/api/authorize/", data: {product: d, host: g.get("host"), sessionID: g.get("sessionID"), user: g.get("username"), domain: g.get("domain")}, type: "GET", dataType: "json"};
            w(b);
            b = jQuery.ajax(b);
            b.done(function (b, d, T) {
                !1 != b.success && (g.set("auth_key", b.auth_key), g.set("access", b.access), g.set("is_auth", b.is_auth), g.set("license_expiry_days", b.license_expiry_days), g.get("qr") && (g.set("view", "team"), g.set("sort", "project"), g.set("logout_on_select",
                    !0), g.set("multi", !0), g.set("hide_team_done", !0), g.set("minuteBuffer", 30), g.set("minuteBufferSnapToSched", !0), TASK_DB.userId = g.get("userID")), g.get("minuteBufferSnapToSched") && ea(), g.get("restrict_sched") ? ea(function (b) {
                    var d;
                    void 0 == b && (d = "Today is not a work day");
                    var h = new Date, h = Date.parse("01/01/2011 " + h.getHours() + ":" + h.getMinutes()), l = Date.parse("01/01/2011 " + b.start), T = Date.parse("01/01/2011 " + b.stop), f = g.get("minuteBuffer");
                    null != f && (l.setMinutes(l.getMinutes() - f), T.setMinutes(T.getMinutes() +
                        f));
                    void 0 == b || l > h || h > T ? (d = d ? d : "Please return at " + b.start, TASK_CNTRL.showWindow('<div style="text-align: center; font-weight: bold;"><h3>Not scheduled to work</h3></div><div class="content"><p>' + d + '.</p><a href="#" class="btn btn-primary logout cancel" title="Logout">Logout</a></div>')) : a()
                }) : fa(a, function () {
                    La()
                }))
            });
            b.fail(function (a, b, d) {
            })
        }
    }

    function e() {
        var a = {url: t() + "user/count", type: "get", data: {}, dataType: "json"};
        w(a);
        a = jQuery.ajax(a);
        a.done(function (a) {
            void 0 != a.error ? (a.error["class"] ==
                y[0] ? v(function () {
            }) : f(u[0], "uCount," + JSON.stringify(a.error)), n.hide(), s.hide()) : (a = a.data, f(u[1], {uc: a.count}))
        });
        a.fail(function (a, d, h) {
            x({response: a.responseText, type: d, msg: h}, e, "uCount")
        })
    }

    function m() {
        var a = {url: t() + "user/search?ID=$$USER.ID&fields=customer:name,customer:fullUsers,customer:limitedUsers,customer:teamUsers", type: "get", data: {}, dataType: "json"};
        w(a);
        a = jQuery.ajax(a);
        a.done(function (a) {
            void 0 != a.error ? (a.error["class"] == y[0] ? v(function () {
            }) : f(u[0], "uInfo," + JSON.stringify(a.error)),
                n.hide(), s.hide()) : (a = a.data, f(u[1], a))
        });
        a.fail(function (a, d, h) {
            x({response: a.responseText, type: d, msg: h}, m, "uInfo")
        })
    }

    function f(a, b, d) {
        TASK_DB.setEvent(a, JSON.stringify(b))
    }

    function q() {
        if (J || E || void 0 != g.get("host") && "full" == getQueryString("view"))window.clearInterval(P), P = window.setInterval(function () {
            if (navigator.onLine && (E || !document.hasFocus()))jQuery("#search-bar").is(":visible") && jQuery("#search").click(), jQuery("#form-list").hide(), !g.get("apiKey") && !g.get("sessionID") ? K() : U()
        }, 1E3 * (Aa +
            120))
    }

    function p(a, b) {
        var d;
        return(d = g.get("maxTaskTime")) && void 0 != d && d <= Number((b / 3600).toFixed(2)) ? (a = TASK_DB.get(a.ID), a.disable = 1, TASK_DB.setTask(a), TASK_CNTRL.toggleTimer(a), d = jQuery("#item" + a.ID), d.find(".timer").unbind("click").addClass("disabled"), d.find(".timer-info").text("Max Reached"), !0) : !1
    }

    function z() {
        var a = new Date;
        a.setHours(23, 59, 0, 0);
        var b = new Date;
        clearTimeout(Ba);
        Ba = setTimeout(function () {
            TASK_DB.running(function (a) {
                TASK_CNTRL.toggleTimer(a)
            })
        }, a - b);
        clearTimeout(Ca);
        Ca = setTimeout(function () {
                location.reload()
            },
            a - b + 65E3)
    }

    function O() {
        var a = !1;
        if (void 0 == g.get("date") || (new Date(g.get("date"))).getDay() != (new Date).getDay())C(), a = !0;
        U();
        g.get("ent") ? jQuery("#licence").text("Enterprise") : g.get("license_expiry_days") && jQuery("#licence").text("Expires in " + g.get("license_expiry_days") + " day(s)");
        return a
    }

    function C() {
        jQuery("#form-list").empty();
        g.set("notified", !1);
        TASK_DB.dropTaskTable();
        TASK_DB.createDB();
        TASK_CNTRL.toggleRunText();
        var a = new Date;
        jQuery("#todayDate").html("Date: " + ga(a.getMonth()) + " " + a.getDate());
        z();
        g.set("date", a.toDateString());
        g.get("ent") && c()
    }

    function V() {
        var a = g.get("view");
        void 0 == a ? Da() : jQuery("#button-" + a).click()
    }

    function Da() {
        jQuery("#button-current").click()
    }

    function La() {
        if ("" == g.get("access") && !g.get("notified")) {
            g.set("notified", !0);
            var a = '<div style="text-align: center; font-weight: bold;"><h3>Expired for ' + g.get("host") + '</h3></div><div class="content"><div><p>To keep the ease of tracking your time, see due dates, and completing your tasks, please visit our site below to see licencing options for your company or to arrange an extended demo. If seeing this for the first time, another employee at your company has used this service 30 days ago, please contact info@atappstore.com to extend.</p></div><a href="http://store.atappstore.com/index.php/portfolio/stopwatch/" target="_blank"><img src="icons/AtAppStore.png" style=""></a><div style="font-size: 10px;">* this notification will only appear once daily.</div></div><div id="close" class="btn btn-primary" style="width:230px"><h3 style="line-height:0px">close</h3></div>';
            TASK_CNTRL.showWindow(a);
            jQuery("#close").unbind("click").click(function (a) {
                a.preventDefault();
                TASK_CNTRL.hideWindow()
            });
            jQuery("#licence").text("Expired");
            f(u[1], {os: BrowserDetect.OS, browser: BrowserDetect.browser, version: BrowserDetect.version, extension: !J, user: g.get("userObj"), license_expiry_days: g.get("license_expiry_days")});
            e();
            m()
        } else g.get("license_expiry_days") && jQuery("#licence").text("Expires in " + g.get("license_expiry_days") + " day(s)")
    }

    function Ma() {
        document.onkeydown = function (a) {
            a = window.event ?
                event : a;
            if (66 == a.keyCode && a.ctrlKey) {
                a = TASK_DB.getEvents();
                for (var b = 0; b < a.length; b++)console.log("%c %s - %c %s - %c %s", "color:blue", a[b].time, "color:orange", a[b].type, "color:brown", a[b].message);
                console.log(TASK_DB.getEvents())
            } else 87 == a.keyCode && a.altKey && window.open(t() + "work/myWork?fields=statusEquatesWith,primaryAssignment:status,canStart,isReady,isStatusComplete,parent:status,parent:canStart,parent:isReady,parent:isStatusComplete,project:statusEquatesWith,project:status,parent:statusEquatesWith,parent:primaryAssignment:status&sessionID=" +
                g.get("sessionID"))
        };
        var a = jQuery("#content");
        a.after('<form id="form-qrlogin" class="form" style="display: none"><h3>Login to Workfront</h3><span class="error"></span><p><div id="outdiv" style="text-align:center;"></div><canvas id="qr-canvas" width="640" height="480" style="display:none;"></canvas><h4 id="result" style="text-align:center;"></h4><button type="submit" class="btn btn-success needsclick" style="display:none;" id="button-appscan" value="scan" tabindex="3">Scan</button><button type="submit" class="btn needsclick" style="" id="button-standard" tabindex="5">Standard Login</button><button type="submit" class="btn btn-primary needsclick" style="display:none;" id="button-qrlogin" value="login" tabindex="4">Login</button></form><div class="spinner-bottom"><div id="blockG_1" class="metro_blockG"></div><div id="blockG_2" class="metro_blockG"></div><div id="blockG_3" class="metro_blockG"></div></div>');
        jQuery(document).on("click", "#button-standard", function (a) {
            a.preventDefault();
            I();
            jQuery("#form-qrlogin").show()
        });
        jQuery(document).on("click", "#button-appscan", function (a) {
            a.preventDefault();
            a = window.navigator.userAgent;
            a.match(/iPad/i) || a.match(/iPhone/i) ? window.location = "zxing://scan/?ret=" + encodeURIComponent(window.location + "&code={CODE}") : window.location = "http://zxing.appspot.com/scan?ret=" + encodeURIComponent(window.location + "&code={CODE}")
        });
        a.after('<form id="form-login" class="form" style="display: none"><h3>Login to Workfront</h3><span class="error"></span><div><div style=""><label for="username">Username</label><input style="" type="text" name="username" id="username" class="text" tabindex="1"></div><div style="clear: both;" id="password-container"><label for="password">Password</label><input type="password" name="password" id="password" class="text" tabindex="2" autocomplete="off"/></div><div style="clear: both;"></div><label for="host">Subdomain</label><input type="text" name="host" id="host" class="text" tabindex="4"/></div><p>eg. <strong>Subdomain</strong>.my.workfront.com</p></p></br><button type="submit" class="btn btn-primary needsclick" id="button-login" value="login" tabindex="5">Login</button></form>');
        jQuery(document).on("click", "#singlesignon", function (a) {
            jQuery("#password-container").toggle()
        });
        a = '<div id="hourTypeWindow" class="window"><div style="text-align: center; font-weight: bold;"><h3>Track as Type:</h3></div><div class="content"><div><select id="hourTypeSelector" ></select><div><a href="#" id="done_hourType" class="btn btn-primary" rel="' + jQuery(this).attr("rel") + '" title="Start">Start</a><a href="#" id="cancel_hourType" class="btn" title="Cancel">Cancel</a><div><div></div>';
        jQuery("#window").after(a);
        if (J || "full" == getQueryString("view") || E)jQuery("#popout").replaceWith('<span id="refresh" style="float: right;" title="Manual Refresh"><img src="core/img/refresh.gif"></span>'), jQuery("html").css("width", "100%"), jQuery(document).on("click", "#refresh", function (a) {
            a.preventDefault();
            jQuery("#form-list").hide();
            jQuery("#search-bar").is(":visible") && jQuery("#search").click();
            F()
        });
        var a = new Date, b = '<div id="top-menu"><div class="btn-group"><a id="filter" title="Filter for other assigned tasks and issues" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="#">Filters<span class="caret"></span></a><ul class="dropdown-menu">',
            d;
        for (d in L)L.hasOwnProperty(d) && (b += '<li id="filter-' + d + '"><a href="#" id="button-' + d + '" class="filter" title="' + L[d].d + '" >' + L[d].t + "</a></li>");
        b += '<div id="custom-filters"><div id="task-filters" style="display:none;"></div><div id="opTask-filters" style="display:none;"></div></div><li><a href="#" class="logout" id="button-logout" >Login as New User</a></li></ul></div><span id="totalHours" title="Go To Timesheets" class="btn" style="">Today\'s Hours: 0</span><span id="todayDate" class="btn disabled" style="">Date: ' +
            ga(a.getMonth()) + " " + a.getDate() + "</span></div>";
        jQuery("#bar").html(b);
        Ea(L);
        jQuery(document).on("click", "#totalHours", function (a) {
            a.preventDefault();
            a = "https://" + g.get("host") + "." + g.get("domain") + "/timesheets/current";
            E ? window.open(a, "_blank", "location=yes") : window.open(a);
            return!1
        });
        var h = function (a, b) {
            for (var d in B)B.hasOwnProperty(d) && d != b && (B[d] = "desc");
            g.set("current_sort", {sort: b, order: B[b]});
            B[b] = "asc" == B[b] ? "desc" : "asc";
            jQuery("#sort-menu").find(">ul>li>a").removeClass();
            jQuery(a).addClass("btn active");
            sortable("#form-list", "disable");
            jQuery("#form-list").removeClass("sortable")
        };
        jQuery(document).on("click", "#sort-task", function (a) {
            a.preventDefault();
            h(this, "task");
            jQuery("div#form-list>div").children().length && tinysort("div#form-list>div", {order: "desc", useVal: !0, attr: "data-force-order"}, {order: B.task}, {selector: ".details", order: "desc"})
        });
        jQuery(document).on("click", "#sort-project", function (a) {
            a.preventDefault();
            h(this, "project");
            jQuery("div#form-list>div").children().length && tinysort("div#form-list>div",
                {order: "desc", useVal: !0, attr: "data-force-order"}, {selector: ".details", order: B.project}, {selector: ".details", order: "desc", useVal: !0, attr: "data-days"})
        });
        jQuery(document).on("click", "#sort-date", function (a) {
            a.preventDefault();
            h(this, "date");
            jQuery("div#form-list>div").children().length && tinysort("div#form-list>div", {order: "desc", useVal: !0, attr: "data-force-order"}, {selector: ".details", order: B.date, useVal: !0, attr: "data-days"}, {selector: ".details", order: "desc"})
        });
        jQuery(document).on("click", "#sort-priority",
            function (a) {
                a.preventDefault();
                h(this, "priority");
                jQuery("div#form-list>div").children().length && tinysort("div#form-list>div", {order: "desc", useVal: !0, attr: "data-force-order"}, {selector: ".details", order: B.priority, useVal: !0, attr: "data-priority"}, {selector: ".details", order: "desc"})
            });
        jQuery(document).on("click", "#sort-status", function (a) {
            a.preventDefault();
            h(this, "status");
            jQuery("div#form-list>div").children().length && tinysort("div#form-list>div", {order: "desc", useVal: !0, attr: "data-force-order"}, {selector: ".details",
                order: B.status, useVal: !0, attr: "data-status"}, {selector: ".details", order: "desc"})
        });
        jQuery(document).on("click", "#sort-order", function (a) {
            a.preventDefault();
            h(this, "order");
            sortable("#form-list", "enable");
            jQuery("#form-list").addClass("sortable");
            jQuery("div#form-list>div").children().length && tinysort("div#form-list>div", {order: "desc", useVal: !0, attr: "data-force-order"}, {selector: ".details", order: B.order, useVal: !0, attr: "data-order"}, {selector: ".details", order: "desc"})
        });
        jQuery(document).on("click",
            ".done", function (a) {
                a.preventDefault();
                a = jQuery(this);
                var b = a.parent().parent(), d = b.children("span.name").attr("title"), b = b.children("span.details").attr("title");
                a = '<div style="text-align: center; font-weight: bold;"><h3>Confirm</h3></div><div class="content"><div>Are you sure you completed <strong>' + d + "</strong><br>from <br><strong>" + b + '?</strong><div><br><a href="#" id="done_confirm" class="btn btn-primary" rel="' + a.attr("rel") + '" title="Done">Done</a><a href="#" class="btn cancel" title="Cancel">Cancel</a><div>';
                TASK_CNTRL.showWindow(a)
            });
        jQuery(document).on("click", "#done_confirm", function (a) {
            a.preventDefault();
            TASK_DB.updateValidate(jQuery(this).attr("rel"), function (a) {
                W(a)
            });
            TASK_CNTRL.hideWindow()
        });
        jQuery(document).on("click", "#cancel_confirm", function (a) {
            a.preventDefault();
            TASK_CNTRL.hideWindow()
        });
        d = function (a) {
            a.preventDefault();
            a = jQuery(this).find(".hour-note").attr("rel");
            if ((a = TASK_DB.get(a)) && a.time && !a.running && !a.disable)Na(a, function (a, b) {
                TASK_CNTRL.showWindow('<div style="text-align: center; font-weight: bold;"><div class="spinner"><div id="blockG_1" class="metro_blockG"></div><div id="blockG_2" class="metro_blockG"></div><div id="blockG_3" class="metro_blockG"></div></div><h3>Timesheet Hour Note:</h3></div><div class="content"><strong>' +
                    a.name + '</strong><br><br><div><textarea maxlength="2000" rows="2" cols="100" class="comment" style="width:300px" id="comment_message">' + (null == b.description ? "" : b.description) + '</textarea><div><a href="#" id="hour-note_confirm" class="btn btn-primary" task="' + a.ID + '" hour="' + b.ID + '" title="Update Note">Update Note</a><a href="#" class="btn cancel" title="Cancel">Cancel</a><div>')
            }), jQuery("textarea.comment").focus()
        };
        jQuery(document).on("click", ".task-lower-block", d);
        jQuery(document).on("click", ".general-lower-block",
            d);
        jQuery(document).on("click", "#hour-note_confirm", function (a) {
            a.preventDefault();
            $t = jQuery(this);
            TASK_DB.updateValidate($t.attr("task"), function (a) {
                Oa(a, $t.attr("hour"), jQuery("#comment_message").val())
            });
            TASK_CNTRL.hideWindow()
        });
        jQuery(document).on("click", ".percent", function (a) {
            a.preventDefault();
            a = jQuery(this);
            var b = jQuery("#form-list");
            b.scrollTop(b.scrollTop() + jQuery("#item" + a.attr("rel")).offset().top - 100);
            if (0 == a.children("input").length) {
                var d = a.text().slice(0, -1);
                a.html("<input type='number' class='inputbox percent' value=\"" +
                    d + '">');
                var h = function (a) {
                    a = jQuery(a);
                    var b = Number(a.val()).toFixed(0);
                    isNaN(b) || 0 > b || 100 < b || d == b ? b = d : TASK_DB.updateValidate(a.parent().attr("rel"), function (a) {
                        X(a, b)
                    });
                    a.parent().text(b + "%")
                };
                jQuery("input.percent").focus().blur(function () {
                    h(this)
                }).keypress(function (a) {
                    13 == a.which && (h(this), a.preventDefault())
                })
            }
        });
        jQuery(document).on("click", ".btn-comment", function (a) {
            a.preventDefault();
            a = jQuery(this);
            a = '<div style="text-align: center; font-weight: bold;"><h3>Comment</h3></div><div class="content"><strong>' +
                a.parent().parent().children("span.name").attr("title") + '</strong><br><br><div><textarea maxlength="2000" rows="2" cols="100" class="comment" style="width:300px" id="comment_message"></textarea><label style="float:right; margin-top: 10px;">Private:<input type="checkbox" name="isPrivate" id="comment_is_private" style="margin: 0 4px;"></label><div><a href="#" id="comment_confirm" class="btn btn-primary" rel="' + a.attr("rel") + '" title="Comment">Comment</a><a href="#" class="btn cancel" title="Cancel">Cancel</a><div>';
            TASK_CNTRL.showWindow(a);
            jQuery("textarea.comment").focus()
        });
        jQuery(document).on("click", "#comment_confirm", function (a) {
            a.preventDefault();
            a = jQuery(this);
            var b = jQuery("#comment_is_private").is(":checked"), d = jQuery("#comment_message").val();
            TASK_DB.updateValidate(a.attr("rel"), function (a) {
                Y(a, d, b)
            });
            TASK_CNTRL.hideWindow()
        });
        var l = jQuery("#form-list");
        l.scroll(function () {
            g.set("vpos", l.scrollTop())
        });
        s = jQuery(".spinner-bottom");
        n = jQuery(".spinner")
    }

    function Fa(a, b) {
        var d = jQuery("#" + a + "-filters").first(),
            h = "", l;
        for (l in b)b.hasOwnProperty(l) && (h += '<li><a href="#" id="button-' + l + '" class="filter" title="' + b[l].d + '" >' + b[l].t + "</a></li>");
        d.append(h);
        Ea(b)
    }

    function Ea(a) {
        var b = jQuery(".filter"), d = jQuery("#active-filter"), h;
        for (h in a)a.hasOwnProperty(h) && (jQuery("#active-filter").hide(), jQuery("#button-" + h).attr("name", h), jQuery(document).on("click", "#button-" + h, function () {
            var h = jQuery(this), f = h.attr("name");
            B = [];
            b.removeClass("btn");
            Ga();
            d.html("Filter: " + h.text());
            d.css("display", "inline-block");
            h.toggleClass("btn");
            g.set("view", f);
            a[f].f()
        }))
    }

    function K() {
        if (M && g.get("allowOffline"))g.remove("apiKey"), g.remove("sessionID"), g.remove("userID"), g.remove("username"), g.remove("password"), g.remove("host"), g.remove("domain"); else {
            var a = g.get("qr");
            g.removeAll();
            g.set("qr", a)
        }
        for (var b in TASK_CNTRL.update_intervals)window.clearInterval(TASK_CNTRL.update_intervals[b]);
        for (b in TASK_CNTRL.display_intervals)window.clearInterval(TASK_CNTRL.display_intervals[b]);
        ha()
    }

    function D(a) {
        TASK_DB.loadAll(function (b) {
            var d =
                b.length, h, l;
            if (0 < d)for (h = 0; h < d; h++)l = b[h], null != l && "GEN" != l.details.objCode && jQuery("#item" + l.ID).hide();
            a()
        })
    }

    function v(a) {
        g.get("ent") ? fa(a) : ia(g.get("username"), g.get("password"), ja(g.get("host") + "." + g.get("domain")), a, function () {
            ha(a)
        })
    }

    function ha(a) {
        g.get("qr") ? Pa(a) : I(a)
    }

    function fa(a, b) {
        n.show();
        jQuery("#loading").hide();
        window.clearInterval(P);
        TASK_DB.dropTaskTable();
        TASK_DB.createDB();
        TASK_CNTRL.toggleRunText();
        n.hide();
        s.hide();
        jQuery("#top-bar").hide();
        jQuery("#bar").hide();
        jQuery(".form").hide();
        c(function () {
            U(function () {
                ka();
                void 0 != a && a()
            }, function (a) {
                void 0 != b ? b() : ha(a)
            })
        })
    }

    function Pa(a) {
        n.show();
        jQuery("#loading").hide();
        window.clearInterval(P);
        TASK_DB.dropTaskTable();
        TASK_DB.createDB();
        TASK_CNTRL.toggleRunText();
        resetForQR();
        n.hide();
        s.hide();
        jQuery("#top-bar").hide();
        jQuery("#bar").hide();
        jQuery(".form").hide();
        jQuery("webcamimg").show();
        var b = jQuery("#form-qrlogin");
        jQuery("#form-list").html("");
        E ? b.show() : b.slideDown(400, function () {
        });
        jQuery("#button-qrlogin").unbind("click").click(function (b) {
            var h =
                jQuery("#form-qrlogin");
            b.preventDefault();
            s.show();
            ia(g.get("username"), g.get("password"), ja(g.get("host")), function () {
                ignoreForQR();
                jQuery("#bar").show();
                E ? h.hide() : h.slideUp();
                jQuery("#top-bar").show();
                jQuery("#loading").show();
                void 0 != a && a()
            }, function () {
                resetForQR()
            })
        })
    }

    function I(a) {
        n.show();
        jQuery("#loading").hide();
        window.clearInterval(P);
        g.set("apiKey", !1);
        g.set("sessionID", !1);
        g.set("userID", !1);
        g.set("ent", !1);
        TASK_DB.dropTaskTable();
        TASK_DB.createDB();
        TASK_CNTRL.toggleRunText();
        n.hide();
        s.hide();
        jQuery("#top-bar").hide();
        jQuery("#bar").hide();
        jQuery(".form").hide();
        var b = jQuery("#form-login"), d = g.get("domain"), h = g.get("host");
        b.find(":input[name='username']").focus().val("");
        b.find(":input[name='host']").val(void 0 == h || "undefined" == h ? "" : "my.workfront.com" != d ? h + "." + d : h);
        b.find(":input[name='password']").val("");
        jQuery("#form-list").html("");
        var l = jQuery("#username");
        E ? (b.show(), l.focus()) : b.slideDown(400, function () {
            l.focus()
        });
        jQuery("#button-login").unbind("click").click(function (d) {
            d.preventDefault();
            s.show();
            ia(jQuery.trim(b.find(":input[name='username']").val()), jQuery.trim(b.find(":input[name='password']").val()), ja(jQuery.trim(b.find(":input[name='host']").val())), function () {
                jQuery("#bar").show();
                E ? b.hide() : b.slideUp();
                jQuery("#top-bar").show();
                jQuery("#loading").show();
                void 0 != a && a()
            })
        })
    }

    function N(a, b, d) {
        var h = new Date;
        a.dateStr = h.getFullYear() + "-" + (h.getMonth() + 1) + "-" + h.getDate();
        a.duration = b;
        navigator.onLine ? Z(a, Qa, d) : (b = g.get("offlineTasks"), void 0 == b && (b = []), b.push(a), g.set("offlineTasks",
            b), n.hide(), s.hide(), !0 == g.get("logout_on_select") && K())
    }

    function la(a) {
        Z(a, function (a, d) {
            var h = new Date, l = {entryDate: h.getFullYear() + "-" + (h.getMonth() + 1) + "-" + h.getDate(), ownerID: g.get("userID")};
            l.extRefID = d && d.extRefID ? "ON!" + h.getHours() + ":" + h.getMinutes() + ";" + d.extRefID : "ON~" + h.getHours() + ":" + h.getMinutes() + ".";
            l.extRefID = l.extRefID.substring(0, 254);
            void 0 == d || -1 != d.permissions.actions.indexOf("ADD_HOURS") && -1 != d.permissions.actions.indexOf("CHANGE_STATUS") ? (l.hours = 0.01, l.method = "post") : (l.method =
                "put", l.ID = d.ID);
            if ("GEN" == a.details.objCode)l.hourTypeID = a.syncID; else {
                switch (a.details.objCode) {
                    case "OPTASK":
                        l.opTaskID = a.syncID;
                        break;
                    case "TASK":
                        l.taskID = a.syncID;
                        break;
                    case "PROJ":
                        l.projectID = a.syncID;
                        break;
                    default:
                        l.hourTypeID = a.syncID
                }
                l.hourTypeID || (l.hourTypeID = g.get("forceHourTypeID"), void 0 == l.hourTypeID && (void 0 != a.details.hourTypeID && "" != a.details.hourTypeID) && (l.hourTypeID = a.details.hourTypeID))
            }
            h = {url: t("api/v7.0") + "hour/", type: "get", data: l, dataType: "json", async: !1};
            w(h);
            h = jQuery.ajax(h);
            h.done(function (d) {
                void 0 != d.error ? d.error["class"] == y[0] ? v(function () {
                    setHourAttask()
                }) : x({response: d.error, type: null, msg: null}, function () {
                    la(a)
                }, "logStart," + a.syncID + " " + a.name + " url: " + t() + " " + JSON.stringify(l) + " " + G(a)) : (void 0 != l.taskID || void 0 != l.opTaskID) && Q(a)
            });
            h.fail(function (d, h, f) {
                x({response: d.responseText, type: h, msg: f}, function () {
                    la(a)
                }, "logStart-fail," + a.syncID + " " + a.name + " url: " + t() + " " + JSON.stringify(l) + " " + G(a) + "," + a.duration + ", " + d.responseText + ", " + f, d.responseText)
            })
        })
    }

    function ga(a) {
        return"Jan. Feb. Mar. Apr. May June Jul. Aug. Sep. Oct. Nov. Dec.".split(" ")[a]
    }

    function G(a) {
        return void 0 != a.details.project ? a.details.project.name.split(",").join(" ") + "," + a.name.split(",").join(" ") : a.details
    }

    function w(a, b) {
        void 0 == b && (b = 1E4);
        a.timeout = b;
        J && !Ha && (a.dataType = "jsonp", a.crossDomain = !0, a.jsonp = "jsonp", a.cache = !0);
        var d = g.get("sessionID"), h = g.get("apiKey");
        h ? ("PUT" == a.data.method && (a.type = "POST"), a.data.apiKey = h) : a.data.sessionID = d
    }

    function ja(a) {
        if (1 < a.split(".").length) {
            var b = a.split("//");
            return 1 < b.length ? (b.shift(), b[0]) : a
        }
        return a + ".my.workfront.com"
    }

    function ia(a, b, d, h, l) {
        if (void 0 == a || void 0 == b || void 0 == d)l(); else {
            var f = jQuery(".error");
            f.html("");
            if (6 == b.length && "" != d) {
                g.set("username", a);
                g.set("password", b);
                var e = d.split(".");
                g.set("host", e[0]);
                e.shift();
                g.set("domain", e.join("."));
                c(function () {
                    s.hide();
                    F();
                    q();
                    void 0 != h && h()
                })
            } else e = {url: "https://" + d + "/attask/api/v" + (-1 != location.origin.indexOf("localhost") ? 2 : 5) + ".0/login", type: "post", data: {username: a, password: b, method: "post"}, dataType: "json"}, w(e), M ? (e = g.get(a), void 0 != e ? (Ia(e.sessionID, e.userID, e.username,
                e.password, d), s.hide(), F(), q(), void 0 != h && h()) : f.html("OFFLINE")) : (e = jQuery.ajax(e), e.done(function (c) {
                void 0 != c.error ? (g.get("qr") ? f.html("Please Scan Again.") : f.html(c.error.message), s.hide(), void 0 !== l && l()) : (c = c.data, Ia(c.sessionID, c.userID, a, b, d), g.set("userObj", JSON.stringify(c)), s.hide(), k(function () {
                    g.get("ent") || F();
                    q();
                    void 0 != h && h()
                }))
            }), e.fail(function (a, b, h) {
                a.responseText && "" !== a.responseText ? -1 != a.responseText.indexOf("<html>") ? g.get("qr") ? f.html("Please Scan Again.") : f.html("Host Invalid: " +
                    d) : g.get("qr") ? f.html("Please Scan Again.") : f.html(JSON.parse(a.responseText).error.message.replace("Authentication Exception: Authentication Exception: {0}", "Wrong login, please try again.")) : g.get("qr") ? f.html("Please Scan Again.") : f.html("Host Invalid: " + d);
                s.hide();
                void 0 !== l && l()
            }))
        }
    }

    function Ia(a, b, d, h, l) {
        g.set("sessionID", a);
        g.set("userID", b);
        g.set("username", d);
        g.set("password", h);
        l = l.split(".");
        g.set("host", l[0]);
        l.shift();
        g.set("domain", l.join("."));
        g.get("allowOffline") && g.set(d, {sessionID: a,
            userID: b, username: d, password: h})
    }

    function U(a, b) {
        var d = g.get("sessionID");
        void (0 == d || "" == d) && !g.get("apiKey") ? v(a) : (n.show(), d = {url: t() + "user/" + g.get("userID"), data: {method: "put", updates: "{isActive: true}"}, type: "get", dataType: "json"}, w(d), d = jQuery.ajax(d), d.done(function (d) {
            void 0 != d.error ? (d.error["class"] == y[0] ? void 0 != b ? b(a) : v(a) : f(u[0], "sessionValid," + g.get("sessionID") + "," + JSON.stringify(d.error)), n.hide(), s.hide()) : (n.hide(), s.hide(), void 0 == g.get("auth_key") ? k(F) : F(), void 0 != a && a())
        }), d.fail(function (d, l, c) {
            401 ==
                d.status ? void 0 != b ? b(a) : v(a) : "timeout" == l ? U(a) : f(u[0], "sessionValid," + g.get("sessionID") + "," + d.responseText)
        }))
    }

    function F() {
        n.show();
        ma();
        Ja();
        var a = g.get("userID"), b = {url: t("api-internal") + "timeSheet/search", type: "get", data: {startDate: "$$TODAY+1", startDate_Mod: "lte", endDate: "$$TODAY-1", endDate_Mod: "gte", fields: "extRefID,startDate,timesheetProfile:description,timesheetProfile:hourTypes:ID,timesheetProfile:hourTypes:name,timesheetProfile:hourTypes:description,timesheetProfile:hourTypes:scope,timesheetProfile:hourTypes:isActive",
            userID: a}, dataType: "json"};
        w(b, 35E3);
        M ? g.get("allowOffline") ? (a = TASK_DB.userRunningTasks(a), void 0 != a && (A = !0, TASK_DB.insert(a.name, {syncID: a.syncID, details: a.details}, !0))) : TASK_CNTRL.displayError("OFFLINE") : (a = jQuery.ajax(b), a.done(function (a) {
            if (void 0 != a.error)a.error["class"] == y[0] ? v(function () {
                F()
            }) : f(u[0], "addGeneralTasks-done," + JSON.stringify(a.error)); else {
                a = a.data;
                if (0 != a.length) {
                    var b = new Date(g.get("launched"));
                    if (null == a[0].extRefID)R(a[0].ID, b, 0); else if (g.get("updateAtInterval")) {
                        var l =
                            0, c = 1;
                        if (isNaN(parseInt(a[0].extRefID)))var e = JSON.parse(a[0].extRefID), l = e.last_launched, c = parseInt(e.count); else l = a[0].extRefID;
                        l = new Date(parseInt(l));
                        if (0 < l.getTime()) {
                            if (l.getTime() > b.getTime()) {
                                TASK_CNTRL.showWindow('<div class="content"><h3>Stopwatch has been launched on another computer at ' + l.toLocaleTimeString() + ', Would you like to keep this stopwatch?</h3><div style="text-align:center"></div><div id="dupe-yes" class="btn btn-primary" style="width:230px"><h3 style="line-height:0px">Yes</h3></div><div id="dupe-no" class="btn btn-default" style="width:230px"><h3 style="line-height:0px">No</h3></div></div></div>');
                                jQuery("#dupe-yes").unbind("click").click(function (b) {
                                    b.preventDefault();
                                    n.show();
                                    TASK_CNTRL.hideWindow();
                                    b = new Date;
                                    g.set("launched", b.getTime());
                                    R(a[0].ID, b, c, function () {
                                        F()
                                    })
                                });
                                jQuery("#dupe-no").unbind("click").click(function (a) {
                                    a.preventDefault();
                                    n.show();
                                    jQuery("#holder").empty();
                                    g.get("updateAtInterval") ? (TASK_DB.running(function (a) {
                                        N(a, -Aa)
                                    }), setTimeout(function () {
                                        C();
                                        window.close();
                                        TASK_CNTRL.hideWindow()
                                    }, 2E3)) : (C(), window.close(), TASK_CNTRL.hideWindow())
                                });
                                return
                            }
                            l.getTime() != b.getTime() &&
                            R(a[0].ID, b, c)
                        }
                    }
                }
                if (0 != a.length && void 0 != a[0].timesheetProfile && void 0 != a[0].timesheetProfile.hourTypes)if (a[0].timesheetProfile.description == Ra && E)jQuery(".holder").empty(), TASK_CNTRL.showWindow('<div class="content"><h3>Please use Stopwatch on a desktop computer.</h3></div>'), n.hide(), s.hide(); else if (b = g.get("userHostName"), void 0 != b && -1 == a[0].timesheetProfile.description.indexOf(b) && !getQueryString("force_host"))jQuery(".holder").empty(), TASK_CNTRL.showWindow('<div class="content"><h3>Please use Stopwatch on a work computer.</h3></div>'),
                    n.hide(), s.hide(); else {
                    if (0 != a[0].timesheetProfile.hourTypes.length) {
                        var b = 0, l = a[0].timesheetProfile.hourTypes, k;
                        for (k in l)l.hasOwnProperty(k) && (!0 == l[k].isActive && "P" != l[k].scope) && (b++, TASK_DB.insert(l[k].name, {syncID: l[k].ID, details: {objCode: "GEN", description: null != l[k].description ? "General - " + l[k].description : "'General"}}, 0))
                    }
                    V()
                } else g.get("general") ? na() : V()
            }
        }), a.fail(function (a, h, l) {
            x({response: a.responseText, type: h, msg: l, status: a.status}, F, "addGeneralTasks-fail" + h + "-" + l + " " + a.responseText +
                " " + a.status + " " + JSON.stringify(b))
        }))
    }

    function R(a, b, d, h) {
        var l = {url: t() + "timeSheet/", type: "get", data: {ID: a, extRefID: JSON.stringify({last_launched: b.getTime(), count: ++d}), method: "put"}, dataType: "json"};
        w(l);
        var c = jQuery.ajax(l);
        c.done(function (l) {
            void 0 != l.error ? l.error["class"] == y[0] ? v(function () {
                R(a, b, d, h)
            }) : f(u[0], "ownTimesheet," + a + JSON.stringify(l.error)) : void 0 != h && h()
        });
        c.fail(function (f, c, g) {
            x({response: f.responseText, type: c, msg: g, status: f.status}, function () {
                R(a, b, d, h)
            }, "ownTimesheet-fail" +
                a + " " + c + "-" + g + " " + f.responseText + " " + f.status + " " + JSON.stringify(l))
        })
    }

    function ka() {
        var a = {url: t() + "HourType/search", type: "get", data: {fields: "ID", description: "Stopwatch", description_Mod: "cicontains"}, dataType: "json"};
        w(a);
        var b = jQuery.ajax(a);
        b.done(function (a) {
            if (void 0 != a.error)a.error["class"] == y[0] ? v(function () {
                ka()
            }) : f(u[0], "getStopwatchHourType-done," + JSON.stringify(a.error)); else if (0 !== a.data.length) {
                var b = {};
                a.data.forEach(function (a, d) {
                    b[a.name] = a.ID
                });
                g.set("sw_hour_types", b)
            }
        });
        b.fail(function (b, h, l) {
            x({response: b.responseText, type: h, msg: l, status: b.status}, ka, "getStopwatchHourType-fail" + h + "-" + l + " " + b.responseText + " " + b.status + " " + JSON.stringify(a))
        })
    }

    function ca() {
        n.show();
        var a = {filterType: "STANDARD", fields: "name, definition, enteredByID", method: "get"};
        Sa || (a.enteredByID_Mod = "notnull");
        a = {url: t("api/v9.0") + "uift/filtersForObjCode/", data: a, type: "GET", dataType: "json"};
        w(a);
        var b = jQuery.extend(!0, {}, a);
        b.data.objCode = "OPTASK";
        a.data.objCode = "TASK";
        jQuery.when(jQuery.ajax(a), jQuery.ajax(b)).done(function (a, b) {
            a = a[0];
            b = b[0];
            var l = void 0 != a.error ? a.error : b.error;
            void 0 != l ? l["class"] == y[0] ? I(function () {
                ca()
            }) : f(u[0], "addCustomFilters," + JSON.stringify(r.error)) : (Fa("task", Ka("task", a.data)), Fa("opTask", Ka("opTask", b.data)), l = jQuery("#opTask-filters"), l.children().length && l.show(), l = jQuery("#task-filters"), l.children().length && l.show(), void 0 == L[g.get("view")] && V())
        }).fail(function (a, b, l) {
                401 == a.status ? (console.log("auth error sessionID:" + g.get("sessionID") + " apiKey: " + g.get("apiKey")), g.get("apiKey") &&
                    jQuery(".error").html("Please contact your internal stopwatch support, API Key invalid"), I()) : x({response: a.responseText, type: b, msg: l, status: a.status}, ca, "addCustomFilters-fail" + b + "-" + l + " " + a.responseText + " " + a.status)
            })
    }

    function Ka(a, b) {
        var d = "task" == a ? "task" : "issue", h = {}, l = -1;
        b.sort(function (a, b) {
            return a.name.localeCompare(b.name)
        });
        for (var f in b)if (b.hasOwnProperty(f) && (l = b[f].name.indexOf(" - Stopwatch"), null != b[f].enteredByID && -1 != l)) {
            var c = {}, e, k;
            for (k in b[f].definition)e = b[f].definition[k].replace(/&/g,
                "%26").replace("$$USER.ID", g.get("userID")), -1 == e.indexOf("$$USER") && (c[k] = e.split("\t"));
            h[b[f].ID] = {q: jQuery.param(c).replace(RegExp("%5B%5D", "g"), ""), f: function () {
                return oa(a, this.q)
            }, t: b[f].name.substr(l), d: "Custom " + d + " filter: " + Ta(c)}
        }
        return h
    }

    function Ta(a) {
        var b = "", d;
        for (d in a)a.hasOwnProperty(d) && (b += d + "=" + a[d] + "\n");
        return b
    }

    function oa(a, b) {
        var d = {};
        a = void 0 == a ? "task" : a;
        d.fields = "parent,extRefID,priority,project,project:hourTypes,project:status,plannedCompletionDate,permissions,canStart,status";
        "task" == a && (d.fields += ",percentComplete");
        n.show();
        var h = {url: t("api/v9.0") + a + "/search?" + b, type: "get", data: d, dataType: "json"};
        w(h);
        h = jQuery.ajax(h);
        h.done(function (b) {
            void 0 != b.error ? (b.error["class"] == y[0] ? v(function () {
                oa(a, d)
            }) : f(u[0], "addFilteredTasks," + JSON.stringify(b.error)), n.hide(), s.hide()) : (b = b.data, 0 == b.length ? (A = !0, D(function () {
                TASK_CNTRL.showAll()
            })) : D(function () {
                var a = b.length;
                A = !0;
                for (var d = 0; d < a; d++) {
                    var h = -1 != ["CPL", "DED", "REJ", "CLS", "RLV"].indexOf(b[d].status) ? 1 : !1 == b[d].canStart ||
                        -1 == b[d].permissions.actions.indexOf("ADD_HOURS") && -1 == b[d].permissions.actions.indexOf("CHANGE_STATUS");
                    TASK_DB.insert(b[d].name, {syncID: b[d].ID, details: b[d], disable: h}, d == a - 1)
                }
            }))
        });
        h.fail(function (a, b, h) {
            x({response: a.responseText, type: b, msg: h}, oa(b, d), "addFilteredTasks")
        })
    }

    function na() {
        n.show();
        var a = {url: t() + "HourType/search?nameKey=default.hourtype.optask&nameKey=default.hourtype.task&nameKey=default.hourtype.project&nameKey_Mod=notin", type: "get", data: {fields: "ID,name,description", isActive: !0,
            scope: "G", countAsRevenue: !0}, dataType: "json"};
        w(a, 35E3);
        var b = jQuery.ajax(a);
        b.done(function (a) {
            if (void 0 != a.error)a.error["class"] == y[0] ? v(function () {
                na()
            }) : f(u[0], "addAllGeneralTasks-done," + JSON.stringify(a.error)); else {
                a = a.data;
                var b = 0, l;
                for (l in a)a.hasOwnProperty(l) && ("Task Time" != a[l].name && "Issue Time" != a[l].name) && (b++, TASK_DB.insert(a[l].name, {syncID: a[l].ID, details: {objCode: "GEN", description: null != a[l].description ? "General - " + a[l].description : "'General"}}, 0));
                V()
            }
        });
        b.fail(function (b, h, f) {
            x({response: b.responseText, type: h, msg: f, status: b.status}, na, "addAllGeneralTasks-fail" + h + "-" + f + " " + b.responseText + " " + b.status + " " + JSON.stringify(a))
        })
    }

    function x(a, b, d, h) {
        if (401 == a.status)v(function () {
            b()
        }); else if ("timeout" == a.type)b(); else {
            if (void 0 != a.response && "" != a.response) {
                var l;
                l = "object" === typeof a.response ? a.response.message : JSON.stringify(a.response);
                TASK_CNTRL.displayError("Workfront Error: " + l + "<br>" + (void 0 != h && "" != h ? h : ""))
            } else TASK_CNTRL.displayError("Error: " + (void 0 != h && "" != h ?
                h : ""));
            f(u[0], d + "," + a.msg + " " + a.type + " " + JSON.stringify(a.response) + " " + h)
        }
    }

    function t(a) {
        void 0 == a && (a = "api/v7.0");
        return"https://" + g.get("host") + "." + g.get("domain") + "/attask/" + a + "/"
    }

    function pa() {
        n.show();
        var a = {url: t("api/v9.0") + "proj/search?tasks:isComplete=false&tasks:canStart=true&tasks:statusEquatesWith=NEW&tasks:statusEquatesWith=INP&tasks:statusEquatesWith=ROP&tasks:statusEquatesWith_Mod=in&statusEquatesWith=CUR&statusEquatesWith=QUE&statusEquatesWith_Mod=in&projectedCompletionDate=$$TODAYb-1w&projectedCompletionDate_Mod=gt",
            data: {fields: "priority, permissions, hourTypes, status, extRefID, plannedCompletionDate, percentComplete", method: "get"}, type: "GET", dataType: "json"};
        w(a);
        var b = jQuery.extend(!0, {}, a), d = g.get("userID");
        a.data["tasks:assignedToID"] = d;
        b.data.ownerID = d;
        jQuery.when(jQuery.ajax(a), jQuery.ajax(b)).done(function (a, b) {
            a = a[0];
            b = b[0];
            var d = void 0 != a.error ? a.error : b.error;
            void 0 != d ? d["class"] == y[0] ? v(function () {
                pa()
            }) : f(u[0], "addCurrentProjects," + JSON.stringify(r.error)) : D(function () {
                function d(a) {
                    for (var b = a.length,
                             h = 0; h < b; h++) {
                        var f = a[h];
                        f.project = jQuery.extend(!0, {}, f);
                        f.type = "Project";
                        TASK_DB.insert(f.name, {syncID: f.ID, details: f}, h == b - 1)
                    }
                }

                A = !0;
                d(a.data);
                d(b.data)
            })
        }).fail(function (a, b, d) {
                x({response: a.responseText, type: b, msg: d, status: a.status}, pa, "addCurrentProjects-fail" + b + "-" + d + " " + a.responseText + " " + a.status)
            })
    }

    function S(a, b, d) {
        a = void 0 == a ? "task" : a;
        d = void 0 == d ? !1 : d;
        n.show();
        var h = {url: t() + "assgn/search?" + a + ":statusEquatesWith=NEW&" + a + ":statusEquatesWith=INP&" + a + ":statusEquatesWith=ONH&" + a + ":statusEquatesWith=AWF&" +
            a + ":statusEquatesWith=ROP&project:statusEquatesWith=IDA&project:statusEquatesWith=CUR&project:statusEquatesWith=QUE", type: "get", data: {}, dataType: "json"};
        h.data[a + ":statusEquatesWith_Mod"] = "in";
        h.data["project:statusEquatesWith_Mod"] = "in";
        h.data.fields = a + ":parent," + a + ":canStart," + a + ":priority," + a + ":project, " + a + ":project:hourTypes," + a + ":project:status," + a + ":plannedCompletionDate," + a + ":status, " + a + ":extRefID," + a + ":permissions";
        h.data.status = "DN";
        h.data.status_Mod = "ne";
        h.data.assignedToID = g.get("userID");
        h.data.$$LIMIT = 2E3;
        d && (h.data["project:projectedCompletionDate"] = "$$TODAYb-1w", h.data["project:projectedCompletionDate_Mod"] = "gt");
        var l = g.get("currentRole");
        "role" == g.get("view") && void 0 != l ? h.data[a + ":roleID"] = l.ID : h.data.assignedToID = g.get("userID");
        "task" == a && (h.data[a + ":canStart"] = !0, h.data.fields += "," + a + ":percentComplete");
        w(h);
        h = jQuery.ajax(h);
        h.done(function (h) {
            if (void 0 != h.error)h.error["class"] == y[0] ? v(function () {
                S(a, b, d)
            }) : f(u[0], "addAllAssignedTasks-" + a + "," + JSON.stringify(h.error)), n.hide(),
                s.hide(); else {
                h = h.data;
                var l = !0, c = g.get("view");
                "all" != c && "role" != c && (l = !1);
                var e = g.get("hour_types");
                if ("opTask" != a)S("opTask", b, d), D(function () {
                    var a = h.length;
                    if (a)for (var b = 0; b < a; b++) {
                        var d = h[b].task;
                        if (-1 != d.permissions.actions.indexOf("ADD_HOURS") && -1 != d.permissions.actions.indexOf("CHANGE_STATUS")) {
                            var f = !1, c = d.project.hourTypes.length;
                            if (void 0 != e && c)for (var g = 0; g < c; g++) {
                                if (void 0 != e[d.project.hourTypes[g].ID]) {
                                    f = !0;
                                    break
                                }
                            } else f = !0;
                            f && d.canStart && TASK_DB.insert(d.name, {syncID: d.ID, details: d},
                                l && b == a - 1)
                        }
                    }
                }); else {
                    c = h.length;
                    A = l;
                    if (c)for (var k = 0; k < c; k++) {
                        var p = h[k].opTask;
                        if (-1 != p.permissions.actions.indexOf("ADD_HOURS") && -1 != p.permissions.actions.indexOf("CHANGE_STATUS")) {
                            var q = !1, m = p.project.hourTypes.length;
                            if (void 0 != e && m)for (var t = 0; t < m; t++) {
                                if (void 0 != e[p.project.hourTypes[t].ID]) {
                                    q = !0;
                                    break
                                }
                            } else q = !0;
                            q && TASK_DB.insert(p.name, {syncID: p.ID, details: p}, l && k == c - 1)
                        }
                    } else TASK_CNTRL.showAll(h);
                    b && b(h)
                }
            }
        });
        h.fail(function (a, b, d) {
            x({response: a.responseText, type: b, msg: d}, function (a, b, d) {
                S(a,
                    b, d)
            }, "addAllAssignedTasks-fail" + b + "-" + d + " " + a.responseText)
        })
    }

    function qa(a) {
        n.show();
        var b = {url: t("api/v7.0") + "user/search", type: "get", data: {fields: "role:*,roles:*", ID: g.get("userID")}, dataType: "json"};
        w(b);
        b = jQuery.ajax(b);
        b.done(function (b) {
            if (void 0 != b.error)b.error["class"] == y[0] ? v(function () {
                qa(a)
            }) : f(u[0], "addAllRoleTasks," + JSON.stringify(b.error)), n.hide(), s.hide(); else if (b = b.data[0], 0 == b.length)a && a(), n.hide(), s.hide(); else {
                var h = jQuery("#role-filter"), l = function () {
                    S("task", function () {
                        jQuery("#active-filter").hide();
                        h.css("display", "inline-block");
                        n.hide();
                        s.hide()
                    })
                }, c = function (a, b) {
                    g.set("currentRole", {name: a, ID: b});
                    h.find("button").html("<strong>Role: </strong><span>" + a + '</span><span class="caret"></span>');
                    l()
                }, e = g.get("currentRole");
                void 0 != e ? c(e.name, e.ID) : void 0 != b.role && c(b.role.name, b.role.ID);
                if (void 0 != b.roles && 0 != b.roles.length)for (var e = h.find(".dropdown-menu").html("").first(), k = 0, p = b.roles.length; k < p; k++)e.append('<li><a href="#" id="' + b.roles[k].ID + '">' + b.roles[k].name + "</a></li>"), e.find("#" +
                    b.roles[k].ID).click(function () {
                        c(jQuery(this).text(), jQuery(this).attr("id"))
                    }); else Ga(), n.hide(), s.hide(), Da(), TASK_CNTRL.showWindow('<div style="text-align: center; font-weight: bold;"><h3>Roles</h3></div><div class="content"><div><p>No additional roles available.</strong></h3><div><a href="#" class="btn btn-primary cancel" title="Ok">Ok</a><div>')
            }
        });
        b.fail(function (a, b, f) {
            x({response: a.responseText, type: b, msg: f}, qa, "addAllRoleTasks")
        })
    }

    function Ga() {
        var a = jQuery("#role-filter");
        a.hide();
        a.find(".dropdown-menu").first().html("")
    }

    function ra(a) {
        n.show();
        var b = {url: t() + "team/search", type: "get", data: {fields: "ID", "users:ID": g.get("userID")}, dataType: "json"};
        w(b);
        b = jQuery.ajax(b);
        b.done(function (b) {
            void 0 != b.error ? (b.error["class"] == y[0] ? v(function () {
                ra(a)
            }) : f(u[0], "addAllGroupTasks," + JSON.stringify(b.error)), n.hide(), s.hide()) : (b = b.data, 0 == b.length ? (a ? a() : jQuery("#form-list").hide(), n.hide(), s.hide(), TASK_CNTRL.showNoTaskWindow()) : D(function () {
                for (var h = b.length, f = function (b, d) {
                    if (0 == --h) {
                        var f = H.length;
                        A = !0;
                        if (0 == f)TASK_CNTRL.showAll(H);
                        else {
                            for (var c = 0; c < f; c++)TASK_DB.insert(H[c].name, {syncID: H[c].ID, details: H[c]}, c == f - 1);
                            H = [];
                            a && a()
                        }
                    }
                }, c = 0; c < h; c++)aa("task", b[c].ID, f)
            }))
        });
        b.fail(function (a, b, f) {
            x({response: a.responseText, type: b, msg: f}, ra, "addAllGroupTasks")
        })
    }

    function aa(a, b, d) {
        a = void 0 == a ? "task" : a;
        n.show();
        var h = {url: t() + a + "/search?statusEquatesWith=NEW&statusEquatesWith=INP&statusEquatesWith=ROP&project:statusEquatesWith=CUR&project:statusEquatesWith=QUE&project:statusEquatesWith=INF", type: "get", data: {statusEquatesWith_Mod: "in",
            "project:statusEquatesWith_Mod": "in", fields: "permissions,extRefID,status,parent,priority,project,project:hourTypes,project:status,plannedCompletionDate", $$LIMIT: 1E3, "team:ID": b}, dataType: "json"};
        "task" == a && (h.data.canStart = !0, h.data.fields += ",percentComplete");
        w(h);
        h = jQuery.ajax(h);
        h.done(function (h) {
            if (void 0 != h.error)h.error["class"] == y[0] ? v(function () {
                aa(a, b, d)
            }) : f(u[0], "addGroupTasks-" + a + "," + JSON.stringify(h.error)), n.hide(), s.hide(); else if (h = h.data, 0 == h.length)d && d(a, b); else if ("opTask" != a) {
                aa("opTask",
                    b, d);
                for (var c = h.length, g = 0; g < c; g++)H.push(h[g])
            } else {
                c = h.length;
                for (g = 0; g < c; g++)H.push(h[g]);
                d && d(a, b)
            }
        });
        h.fail(function (a, b, d) {
            x({response: a.responseText, type: b, msg: d}, aa, "addGroupTasks-fail" + b + "-" + d + " " + a.responseText)
        })
    }

    function sa() {
        n.show();
        var a = {url: t() + "hour/report", type: "get", data: {entryDate: "$$TODAY-14d", entryDate_Range: "$$TODAY", entryDate_Mod: "between", "timesheet:userID": g.get("userID")}, dataType: "json"};
        w(a);
        var b = jQuery.extend(!0, {}, a);
        b.data.opTaskID_1_GroupBy = !0;
        a.data["task:canStart"] = !0;
        a.data.taskID_1_GroupBy = !0;
        jQuery.when(jQuery.ajax(a), jQuery.ajax(b)).done(function (a, b) {
            a = a[0];
            b = b[0];
            var c = void 0 != a.error ? a.error : b.error;
            if (void 0 != c)c["class"] == y[0] ? v(function () {
                sa()
            }) : f(u[0], "addRecentTasks," + JSON.stringify(c)), n.hide(), s.hide(); else {
                var g = Object.keys(b.data).concat(Object.keys(a.data));
                0 == g.length ? (A = !0, D(function () {
                    TASK_CNTRL.showAll(g)
                })) : D(function () {
                    A = !0;
                    TASK_CNTRL.showAll(TASK_CNTRL.taskDB.loadSyncIds(g))
                })
            }
        }).fail(function (a, b, f) {
            x({response: a.responseText, type: b,
                msg: f}, sa, "addRecentTasks")
        })
    }

    function ta() {
        function a(a, d) {
            var h = {url: t() + "assgn/search?" + a + ":statusEquatesWith=NEW&" + a + ":statusEquatesWith=INP&" + a + ":statusEquatesWith=ROP&project:statusEquatesWith=CUR&project:statusEquatesWith=QUE&status=AD", type: "get", data: {}, dataType: "json"};
            h.data[a + ":statusEquatesWith_Mod"] = "in";
            h.data[a + ":isComplete"] = !1;
            h.data.status_Mod = "in";
            h.data["project:statusEquatesWith_Mod"] = "in";
            d ? h.data[a + ":personal"] = !0 : (h.data["project:projectedCompletionDate"] = "$$TODAYb-1w", h.data["project:projectedCompletionDate_Mod"] =
                "gt");
            h.data.assignedToID = g.get("userID");
            h.data.fields = a + ":canStart," + a + ":parent," + a + ":priority," + a + ":project, " + a + ":project:hourTypes," + a + ":project:status," + a + ":status, " + a + ":extRefID," + a + ":permissions," + a + ":plannedCompletionDate";
            "task" == a && (h.data.fields += ",task:percentComplete");
            w(h);
            return h
        }

        n.show();
        jQuery.when(jQuery.ajax(a("task", !1)), jQuery.ajax(a("task", !0)), jQuery.ajax(a("opTask", !1))).done(function (a, d, h, c) {
            a = a[0];
            d = d[0];
            h = h[0];
            c = void 0 != a.error ? a.error : h.error;
            void 0 != c ? (c["class"] ==
                y[0] ? v(function () {
                ta()
            }) : f(u[0], "addCurrentTasks," + JSON.stringify(c)), n.hide(), s.hide()) : 0 == d.data.length && 0 == a.data.length && 0 == h.data.length ? (A = !0, D(function () {
                TASK_CNTRL.showAll()
            })) : D(function () {
                function f(a, b, d) {
                    for (var h = a.length, c = 0; c < h; c++) {
                        var g = a[c], g = g[b];
                        TASK_DB.insert(g.name, {syncID: g.ID, details: g}, d && c == h - 1)
                    }
                }

                A = !0;
                g.get("personalTasks") && f(d.data, "task", !(a.data.length + h.data.length));
                f(a.data, "task", !h.data.length);
                f(h.data, "opTask", !0)
            })
        }).fail(function (a, d, h) {
                x({response: a.responseText,
                    type: d, msg: h}, function () {
                    ta()
                }, "addCurrentTasks")
            })
    }

    function ua() {
        function a(a) {
            var d = {url: t() + "assgn/search?" + a + ":statusEquatesWith=NEW&" + a + ":statusEquatesWith=INP&" + a + ":statusEquatesWith=ROP&project:statusEquatesWith=CUR&project:statusEquatesWith=QUE", type: "get", data: {}, dataType: "json"};
            d.data[a + ":statusEquatesWith_Mod"] = "in";
            d.data[a + ":isComplete"] = !1;
            d.data.status = "AA";
            d.data["project:statusEquatesWith_Mod"] = "in";
            d.data["project:projectedCompletionDate"] = "$$TODAYb-1w";
            d.data["project:projectedCompletionDate_Mod"] =
                "gt";
            d.data.assignedToID = g.get("userID");
            d.data.fields = a + ":canStart," + a + ":parent," + a + ":priority," + a + ":project, " + a + ":project:hourTypes," + a + ":project:status," + a + ":status, " + a + ":extRefID," + a + ":permissions," + a + ":plannedCompletionDate";
            "task" == a && (d.data[a + ":canStart"] = !0, d.data.fields += ",task:percentComplete");
            w(d);
            return d
        }

        n.show();
        jQuery.when(jQuery.ajax(a("task")), jQuery.ajax(a("opTask"))).done(function (a, d) {
            a = a[0];
            d = d[0];
            var h = void 0 != a.error ? a.error : d.error;
            void 0 != h ? (h["class"] == y[0] ? v(function () {
                ua()
            }) :
                f(u[0], "addRequestedTasks," + JSON.stringify(h)), n.hide(), s.hide()) : 0 == a.data.length && 0 == d.data.length ? (A = !0, D(function () {
                TASK_CNTRL.showAll()
            })) : D(function () {
                function h(a, b) {
                    for (var d = a.length, f = 0; f < d; f++) {
                        var c = a[f][b];
                        c.canStart && TASK_DB.insert(c.name, {syncID: c.ID, details: c}, f == d - 1)
                    }
                }

                A = !0;
                h(a.data, "task");
                h(d.data, "opTask")
            })
        }).fail(function (a, d, h) {
                x({response: a.responseText, type: d, msg: h}, function () {
                    ua()
                }, "addRequestedTasks")
            })
    }

    function va() {
        function a(a) {
            var d = {url: t() + "assgn/search?" + a + ":statusEquatesWith=ONH&" +
                a + ":statusEquatesWith=AWF&project:statusEquatesWith=CUR&project:statusEquatesWith=QUE&project:statusEquatesWith=ONH&project:statusEquatesWith=PLN", type: "get", data: {}, dataType: "json"};
            d.data[a + ":statusEquatesWith_Mod"] = "in";
            d.data[a + ":isComplete"] = !1;
            d.data.status = "AD";
            d.data["project:statusEquatesWith_Mod"] = "in";
            d.data["project:projectedCompletionDate"] = "$$TODAYb-1w";
            d.data["project:projectedCompletionDate_Mod"] = "gt";
            d.data.assignedToID = g.get("userID");
            d.data.fields = a + ":canStart," + a + ":parent," + a +
                ":priority," + a + ":project, " + a + ":project:hourTypes," + a + ":project:status," + a + ":status, " + a + ":extRefID," + a + ":permissions," + a + ":plannedCompletionDate";
            "task" == a && (d.data.fields += ",task:percentComplete");
            w(d);
            return d
        }

        n.show();
        jQuery.when(jQuery.ajax(a("task")), jQuery.ajax(a("opTask"))).done(function (a, d) {
            a = a[0];
            d = d[0];
            var h = void 0 != a.error ? a.error : d.error;
            void 0 != h ? (h["class"] == y[0] ? v(function () {
                va()
            }) : f(u[0], "addOnHoldTasks," + JSON.stringify(h)), n.hide(), s.hide()) : 0 == a.data.length && 0 == d.data.length ? (A = !0, D(function () {
                TASK_CNTRL.showAll()
            })) : D(function () {
                function h(a, b) {
                    for (var d = a.length, f = 0; f < d; f++) {
                        var c = a[f], c = c[b];
                        TASK_DB.insert(c.name, {syncID: c.ID, details: c}, f == d - 1)
                    }
                }

                A = !0;
                h(a.data, "task");
                h(d.data, "opTask")
            })
        }).fail(function (a, d, h) {
                x({response: a.responseText, type: d, msg: h}, function () {
                    va()
                }, "addOnHoldTasks")
            })
    }

    function Ja() {
        var a = {url: t() + "user/search", data: {"hourTypes:isActive": !0, fields: "hourTypes:ID,hourTypes:name,hourTypes:description,hourTypes:countAsRevenue", ID: g.get("userID")}, type: "get",
            dataType: "json"};
        w(a);
        var b = {url: t() + "hourType/search?nameKey=default.hourtype.optask&nameKey=default.hourtype.task&nameKey_Mod=in", data: {isActive: !0, fields: "nameKey"}, type: "get", dataType: "json"};
        w(b);
        wa = !1;
        jQuery.when(jQuery.ajax(a), jQuery.ajax(b)).done(function (a, b) {
            a = a[0];
            b = b[0];
            if (void 0 != a.error)a.error["class"] == y[0] ? v(function () {
            }) : f(u[0], "getHourTypes," + JSON.stringify(a.error)), n.hide(), s.hide(); else {
                a = a.data;
                if (void 0 != a && 0 != a.length && 0 != a[0].hourTypes.length) {
                    g.set("hour_type_list", a[0].hourTypes);
                    for (var c = [], e = 0; e < a[0].hourTypes.length; e++)c[a[0].hourTypes[e].ID] = !0;
                    g.set("hour_types", c);
                    wa = !0
                }
                b = b.data;
                if (void 0 != b && 0 != b.length) {
                    c = {};
                    for (e = 0; e < b.length; e++) {
                        var k;
                        "default.hourtype.task" == b[e].nameKey ? k = "TASK" : "default.hourtype.optask" == b[e].nameKey && (k = "OPTASK");
                        k && (c[k] = b[e])
                    }
                    g.set("default_hour_type_list", c)
                }
            }
        }).fail(function (a, b, c) {
                401 == a.status ? v(function () {
                }) : "timeout" == b ? Ja() : f(u[0], "getHourTypes," + a.responseText)
            })
    }

    function Ua(a, b) {
        if ("GEN" == a.details.objCode)b(a); else {
            var d = g.get("hour_type_list");
            d || (d = []);
            var h = g.get("default_hour_type_list");
            if (d && 1 == d.length)a.details.hourTypeID = d[0].ID, TASK_DB.updateDetails(a.ID, a.details), b(a); else if (a.details.project.hourTypes && 1 == a.details.project.hourTypes.length)a.details.hourTypeID = a.details.project.hourTypes[0].ID, TASK_DB.updateDetails(a.ID, a.details), b(a); else {
                var f = jQuery("#hourTypeSelector");
                f.text("");
                h[a.details.objCode] && f.append($("<option />").val(h[a.details.objCode].ID).text(h[a.details.objCode].name));
                d && d.length && jQuery.each(d, function () {
                    var a =
                        this.ID;
                    f.append($("<option />").val(a).text(this.name))
                });
                a.details.project.hourTypes && a.details.project.hourTypes.length && jQuery.each(a.details.project.hourTypes, function () {
                    f.append($("<option />").val(this.ID).text(this.name))
                });
                TASK_CNTRL.showWindow(null, "#hourTypeWindow");
                jQuery("#done_hourType").unbind("click").bind("click", function (d) {
                    d.preventDefault();
                    a.details.hourTypeID = jQuery("#hourTypeSelector").find(":selected").val();
                    TASK_DB.updateDetails(a.ID, a.details);
                    b(a);
                    TASK_CNTRL.hideWindow("#hourTypeWindow")
                });
                jQuery("#cancel_hourType").unbind("click").bind("click", function (a) {
                    a.preventDefault();
                    TASK_CNTRL.hideWindow("#hourTypeWindow")
                })
            }
        }
    }

    function ea(a) {
        var b = g.get("todaySched");
        null != b ? a(b) : (b = {url: t("api/v7.0") + "user/search?ID=$$USER.ID&fields=schedule:*,schedule:nonWorkDays:*", type: "get", data: {}, dataType: "json"}, w(b), b = jQuery.ajax(b), b.done(function (b) {
            if (void 0 != b.error)b.error["class"] == y[0] ? v(function () {
            }) : f(u[0], "getSchedule," + JSON.stringify(b.error)), n.hide(), s.hide(); else if (b = b.data[0].schedule,
                0 != b.length) {
                var h = new Date, c = b["sunday monday tuesday wednesday thursday friday saturday".split(" ")[h.getDay()]], e;
                if (!0 == b.hasNonWorkDays) {
                    for (var k = 0; k < b.nonWorkDays.length; k++)if (b.nonWorkDays[k].nonWorkDate == h.getFullYear() + "-" + (h.getMonth() + 1) + "-" + h.getDate() && (void 0 != e && null != b.nonWorkDays[k].userID || void 0 == e))e = b.nonWorkDays[k].scheduleDay;
                    void 0 != e && (c = e)
                }
                void 0 != c && 0 != c.length && (c = {start: c[0], stop: c[1]}, g.set("todaySched", c));
                a && a(c)
            }
        }), b.fail(function (b, h, c) {
            401 == b.status ? v(function () {
            }) :
                "timeout" == h ? ea(a) : f(u[0], "getSchedule," + b.responseText)
        }))
    }

    function ma() {
        var a = new Date, a = {url: t() + "hour/report?hours_AggFunc=sum", type: "get", data: {entryDate: a.getFullYear() + "-" + (a.getMonth() + 1) + "-" + a.getDate(), ownerID: g.get("userID")}, dataType: "json"};
        w(a);
        a = jQuery.ajax(a);
        a.done(function (a) {
            void 0 != a.error ? (a.error["class"] == y[0] ? v(function () {
            }) : f(u[0], "getTodaysTotalHours," + JSON.stringify(a.error)), n.hide(), s.hide()) : (a = a.data, jQuery("#totalHours").html("Today's Hours: " + (null == a.sum_hours ? "0" :
                a.sum_hours.toFixed(2))))
        });
        a.fail(function (a, d, h) {
            401 == a.status ? v(function () {
            }) : "timeout" == d ? ma() : f(u[0], "getTodaysTotalHours," + a.responseText)
        })
    }

    function W(a) {
        n.show();
        var b = {assignedToID: g.get("userID")};
        "OPTASK" == a.details.objCode ? b.opTaskID = a.syncID : b.taskID = a.syncID;
        b = {url: t() + "assignment/search", type: "get", data: b, dataType: "json"};
        w(b);
        b = jQuery.ajax(b);
        b.done(function (b) {
            void 0 != b.error ? (b.error["class"] == y[0] ? v(function () {
                W(a)
            }) : f(u[0], "getTaskAssignment," + a.syncID + "," + JSON.stringify(b.error)),
                n.hide(), s.hide()) : (b = b.data[0], a.running ? (a.done = 1, TASK_CNTRL.stopTask(a)) : xa(b, a))
        });
        b.fail(function (b, h, f) {
            x({response: b.responseText, type: h, msg: f}, function () {
                W(a)
            }, "getTaskAssignment," + a.syncID)
        })
    }

    function xa(a, b) {
        n.show();
        var d = {url: t() + "assignment/" + a.ID, data: {method: "PUT", status: "DN"}, type: "get", dataType: "json"};
        w(d);
        d = jQuery.ajax(d);
        d.done(function (d) {
            void 0 != d.error ? (d.error["class"] == y[0] ? v(function () {
                xa(a, b)
            }) : f(u[0], "setAssignmentDone," + a.ID + "," + JSON.stringify(d.error)), n.hide(), s.hide()) :
                (TASK_DB.remove(b.ID), n.hide(), s.hide(), f(u[2], G(b) + ",assignment done"), f(u[1], "assignment done"), ya(b))
        });
        d.fail(function (d, f, c) {
            x({response: d.responseText, type: f, msg: c}, function () {
                xa(a, b)
            }, "setAssignmentDone," + a.ID + ", " + d.responseText)
        })
    }

    function ya(a) {
        n.show();
        var b = {url: t() + "assignment/count", data: {status: "DN", status_Mod: "ne"}, type: "GET", dataType: "json"};
        "OPTASK" == a.details.objCode ? b.data.opTaskID = a.syncID : b.data.taskID = a.syncID;
        w(b);
        b = jQuery.ajax(b);
        b.done(function (b) {
            void 0 != b.error ? (b.error["class"] ==
                y[0] ? v(function () {
                ya(a)
            }) : f(u[0], "getTaskDoneAssignmentCount," + taskID + "," + JSON.stringify(b.error)), n.hide(), s.hide()) : (b = b.data, n.hide(), s.hide(), 0 == b.count && ba(a))
        });
        b.fail(function (b, h, f) {
            x({response: b.responseText, type: h, msg: f}, function () {
                ya(a)
            }, "getTaskDoneAssignmentCount," + a.syncID)
        })
    }

    function ba(a) {
        var b = a.syncID;
        n.show();
        var d = "OPTASK" == a.details.objCode ? "CLS" : "CPL", d = {url: t() + a.details.objCode.toLowerCase() + "/" + b, data: {method: "put", status: d}, type: "get", dataType: "json"};
        w(d);
        d = jQuery.ajax(d);
        d.done(function (d) {
            void 0 != d.error ? (d.error["class"] == y[0] ? v(function () {
                ba(a)
            }) : x({response: d.error, type: null, msg: null}, function () {
                ba(a)
            }, "setTaskDone," + b), n.hide(), s.hide()) : (n.hide(), s.hide(), f(u[2], G(a) + ",task done"), f(u[1], "task done"))
        });
        d.fail(function (d, f, c) {
            x({response: d.responseText, type: f, msg: c}, function () {
                ba(a)
            }, "setTaskDone," + b + ", " + d.responseText)
        })
    }

    function Q(a) {
        n.show();
        var b = {url: t() + a.details.objCode.toLowerCase() + "/" + a.syncID, data: {status: "INP", method: "PUT"}, type: "get", dataType: "json"};
        w(b);
        b = jQuery.ajax(b);
        b.done(function (b) {
            void 0 != b.error ? (b.error["class"] == y[0] ? v(function () {
                Q(a)
            }) : x({response: b.error, type: null, msg: null}, function () {
                Q(a)
            }, "setTaskInProgress," + a.syncID), n.hide(), s.hide()) : (n.hide(), s.hide(), !0 == g.get("logout_on_select") && K())
        });
        b.fail(function (b, f, c) {
            x({response: b.responseText, type: f, msg: c}, function () {
                Q(a)
            }, "setTaskInProgress-fail," + a.syncID + ", " + b.responseText)
        })
    }

    function Y(a, b, d) {
        n.show();
        d = {url: t() + "note/", data: {auditType: "NO", ownerID: g.get("userID"), objID: a.syncID,
            noteObjCode: a.details.objCode, noteText: b.substring(0, 2E3), auditText: "Stopwatch", isPrivate: d, method: "post"}, type: "get", dataType: "json"};
        w(d);
        d = jQuery.ajax(d);
        d.done(function (d) {
            void 0 != d.error && (d.error["class"] == y[0] ? v(function () {
                Y(a, b)
            }) : x({response: d.error, type: null, msg: null}, function () {
                Y(a, b)
            }, "setComment," + a.syncID));
            n.hide();
            s.hide()
        });
        d.fail(function (d, f, c) {
            x({response: d.responseText, type: f, msg: c}, function () {
                Y(a, b)
            }, "setComment-fail," + a.syncID + ", " + d.responseText)
        })
    }

    function X(a, b) {
        n.show();
        var d = {url: t() + a.details.objCode.toLowerCase() + "/" + a.syncID, data: {updates: "{ percentComplete: " + b + "}", method: "PUT"}, type: "get", dataType: "json"};
        w(d);
        d = jQuery.ajax(d);
        d.done(function (d) {
            void 0 != d.error ? d.error["class"] == y[0] ? v(function () {
                X(a, b)
            }) : x({response: d.error, type: null, msg: null}, function () {
                X(a, b)
            }, "setTaskPercent," + a.syncID) : (a.details.percentComplete = b, TASK_DB.updateDetails(a.ID, a.details));
            n.hide();
            s.hide()
        });
        d.fail(function (d, f, c) {
            x({response: d.responseText, type: f, msg: c}, function () {
                    X(a, b)
                },
                "setTaskPercent-fail," + a.syncID + ", " + d.responseText)
        })
    }

    function Qa(a, b, d) {
        var c, l = {ownerID: g.get("userID")};
        void 0 == b || -1 != b.permissions.actions.indexOf("ADD_HOURS") && -1 != b.permissions.actions.indexOf("CHANGE_STATUS") ? (c = 0, l.method = "post") : (c = b.hours, l.method = "put", l.ID = b.ID);
        if ("GEN" == a.details.objCode)l.hourTypeID = a.syncID; else {
            switch (a.details.objCode) {
                case "OPTASK":
                    l.opTaskID = a.syncID;
                    break;
                case "TASK":
                    l.taskID = a.syncID;
                    break;
                case "PROJ":
                    l.projectID = a.syncID;
                    break;
                default:
                    l.hourTypeID = a.syncID
            }
            l.hourTypeID ||
            (l.hourTypeID = g.get("forceHourTypeID"), void 0 == l.hourTypeID && (void 0 != a.details.hourTypeID && "" != a.details.hourTypeID) && (l.hourTypeID = a.details.hourTypeID))
        }
        isNaN(c) && (c = 0);
        l.entryDate = a.dateStr;
        var e = Number((a.duration / 3600).toFixed(2));
        g.get("nearestHour") && (e = Math.round(e));
        l.hours = parseFloat((e + parseFloat(("" + c).split(".").join(".")) + " ").split(".").join(".")).toFixed(2);
        l.ownerID = g.get("userID");
        var k = new Date;
        d || (l.extRefID = ("OK~" + k.getHours() + ":" + k.getMinutes() + "H" + l.hours + "D" + e + "T" + TASK_CNTRL.hms(a.time) +
            ";" + (b && b.extRefID ? b.extRefID.replace("OK~", "OK!") : ".")).substring(0, 254));
        f(u[1], "setHourAttask, oldhr: " + c + " method: " + l.method + " start: " + a.dateStr + " task: " + JSON.stringify(a) + " sid: " + g.get("sessionID") + " time: " + k.toTimeString());
        var p = function () {
            n.show();
            var b = {url: t() + "hour/", type: "get", data: l, dataType: "json", async: !1};
            w(b);
            b = jQuery.ajax(b);
            b.done(function (b) {
                void 0 != b.error ? (b.error["class"] == y[0] ? v(function () {
                    p()
                }) : x({response: b.error, type: null, msg: null}, p, "setHourAttask," + a.syncID + " " + a.name +
                    " url: " + t() + " " + JSON.stringify(l) + " " + G(a) + "," + a.duration, 'Time was not tracked, please click on "View" for task: ' + a.name + " to record time manually."), n.hide(), s.hide()) : (TASK_DB.setTask(a), TASK_CNTRL.toggleRunText(), ma(), void 0 != l.taskID || void 0 != l.opTaskID ? Q(a) : !0 == g.get("logout_on_select") && K(), n.hide(), s.hide(), f(u[2], G(a)), f(u[1], "time tracked newHr: " + l.hours + " " + a.duration + " oldHr: " + c), a.done && W(a))
            });
            b.fail(function (b, d, c) {
                x({response: b.responseText, type: d, msg: c}, p, "setHourAttask-fail," +
                    a.syncID + " " + a.name + " url: " + t() + " " + JSON.stringify(l) + " " + G(a) + "," + a.duration + ", " + b.responseText + ", " + c, b.responseText + '<br>Time was not tracked, please click on "View" for task: ' + a.name + " to record time manually.")
            })
        };
        p()
    }

    function Na(a, b) {
        Z(a, function (a, c, f) {
            b(a, c)
        }, !1)
    }

    function Oa(a, b, d) {
        var c = {method: "put", ID: b, description: d.substring(0, 2E3)};
        switch (a.details.objCode) {
            case "OPTASK":
                c.opTaskID = a.syncID;
                break;
            case "TASK":
                c.taskID = a.syncID;
                break;
            case "PROJ":
                c.projectID = a.syncID;
                break;
            default:
                c.hourTypeID =
                    a.syncID
        }
        var f = function () {
            n.show();
            var b = {url: t() + "hour/", type: "get", data: c, dataType: "json", async: !1};
            w(b);
            b = jQuery.ajax(b);
            b.done(function (b) {
                n.hide();
                s.hide();
                void 0 != b.error && (b.error["class"] == y[0] ? v(function () {
                    f()
                }) : x({response: b.error, type: null, msg: null}, f, "setHourNoteAttask," + a.syncID + " " + a.name + " url: " + t() + " " + JSON.stringify(c) + " " + G(a) + "," + a.duration, "Timesheet hour note was not recorded."))
            });
            b.fail(function (b, d, g) {
                x({response: b.responseText, type: d, msg: g}, f, "setHourNoteAttask-fail," + a.syncID +
                    " " + a.name + " url: " + t() + " " + JSON.stringify(c) + " " + G(a) + "," + a.duration + ", " + b.responseText + ", " + g, b.responseText + "<br>Timesheet hour note was not recorded.")
            })
        };
        f()
    }

    function Z(a, b, d) {
        var c = new Date, l = {};
        l.entryDate = void 0 != a.dateStr ? a.dateStr : c.getFullYear() + "-" + (c.getMonth() + 1) + "-" + c.getDate();
        l.fields = "permissions,ID,hours,extRefID,description";
        l.ownerID = g.get("userID");
        if ("GEN" == a.details.objCode)l.hourTypeID = a.syncID; else {
            switch (a.details.objCode) {
                case "OPTASK":
                    l.opTaskID = a.syncID;
                    break;
                case "TASK":
                    l.taskID =
                        a.syncID;
                    break;
                case "PROJ":
                    l.projectID = a.syncID
            }
            void 0 != a.details.hourTypeID && "" != a.details.hourTypeID && (l.hourTypeID = a.details.hourTypeID)
        }
        c = {url: t() + "hour/search", type: "get", data: l, dataType: "json", async: !1};
        w(c);
        c = jQuery.ajax(c);
        c.done(function (c) {
            if (void 0 != c.error)c.error["class"] == y[0] ? v(function () {
                Z(a, b, d)
            }) : f(u[0], "getHour," + a.syncID + "," + JSON.stringify(c.error)), n.hide(), s.hide(); else if (f(u[1], "getHour " + c.data.length + " " + JSON.stringify(c.data)), b) {
                for (var h = c.data.length, g = 0; g < h; g++)if (-1 !=
                    c.data[g].permissions.actions.indexOf("ADD_HOURS") && -1 != c.data[g].permissions.actions.indexOf("CHANGE_STATUS")) {
                    b(a, c.data[g], d);
                    return
                }
                b(a, c.data[0], d)
            }
        });
        c.fail(function (b, c, d) {
            f(u[0], "getHour," + a.syncID + "," + JSON.stringify(d))
        })
    }

    var y = ["com.attask.common.AuthenticationException"], u = ["error", "debug", "informational"], g, J = !(window.hasOwnProperty("chrome") && window.chrome.hasOwnProperty("windows")), E = isMobile(), da = "www.atappstore.com", za = "secure.atappstore.com", Ha = -1 !== document.URL.indexOf("dashboard.directory") ||
        -1 !== document.URL.indexOf(da) || -1 !== document.URL.indexOf(za), wa = !1, M = !1, Ra = "Force Desktop Stopwatch Access", Aa = 300, H = [], B = [], Ba, Ca, L = {current: {f: ta, t: "Current", d: "Tasks and issues you're working on"}, recent: {f: sa, t: "Recent", d: "All tasks and issues tracked within 14 days"}, requested: {f: ua, t: "Requested", d: "Tasks and issues you can start on"}, onhold: {f: va, t: "On Hold", d: "Tasks and issues that are on hold"}, all: {f: S, t: "All Assigned", d: "All tasks and issues assigned to you"}, team: {f: ra, t: "Team Assigned",
        d: "All tasks and issues assigned to your Teams"}, role: {f: qa, t: "Role Assigned", d: "All tasks and issues available to your Roles"}, projects: {f: pa, t: "Current Projects", d: "All current projects assigned to and own"}}, Sa = getQueryString("allfilters");
    J && (!Ha && -1 == location.origin.indexOf("localhost")) && (location = "https://" + da + "/client/enterprise-stopwatch/launch.html");
    z();
    g = J ? {settings: [], set: function (a, b) {
        switch (a) {
            case "domain":
            case "host":
            case "userID":
            case "sessionID":
            case "username":
            case "date":
            case "view":
            case "current_sort":
            case "launched":
            case "ent":
            case "apiKey":
                "object" === typeof b && (b = JSON.stringify(b)), this.setCookie(a, b, 9999999999)
        }
        this.settings[a] = b
    }, get: function (a) {
        switch (a) {
            case "domain":
            case "host":
            case "userID":
            case "sessionID":
            case "username":
            case "date":
            case "view":
            case "current_sort":
            case "launched":
            case "ent":
            case "apiKey":
                var b = void 0 === this.settings[a] ? this.getCookie(a) : this.settings[a];
                this.settings[a] = b;
                return"undefined" == b || void 0 == b ? void 0 : b;
            default:
                return!this.settings.hasOwnProperty(a) || "undefined" == this.settings[a] || void 0 == this.settings[a] ? void 0 :
                    this.settings[a]
        }
    }, removeAll: function () {
        var a = new Date, b;
        for (b in this.settings)this.settings.hasOwnProperty(b) && (document.cookie = b + "=" + this.settings[b] + ";expires=" + a.toGMTString() + ";;");
        this.settings = []
    }, setCookie: function (a, b, c) {
        var f = new Date;
        f.setHours(0);
        f.setMinutes(0);
        f.setSeconds(0);
        f.setDate(f.getDate() + c);
        b = encodeURI(b) + (null == c ? "" : "; expires=" + f.toUTCString());
        document.cookie = a + "=" + b
    }, getCookie: function (a) {
        var b, c, f, g = document.cookie.split(";");
        for (b = 0; b < g.length; b++)if (c = g[b].substr(0,
            g[b].indexOf("=")), f = g[b].substr(g[b].indexOf("=") + 1), c = c.replace(/^\s+|\s+$/g, ""), c == a)return decodeURI(f);
        return"undefined"
    }} : new Store("Attask");
    g.set("launched", (new Date).getTime());
    window.addEventListener("offline", function (a) {
        jQuery("#refresh").hide();
        jQuery(".done").hide();
        jQuery(".percent").hide();
        jQuery(".btn-comment").hide();
        jQuery(".view").hide();
        M = !0
    });
    window.addEventListener("online", function (a) {
        jQuery("#refresh").show();
        jQuery(".done").show();
        jQuery(".percent").show();
        jQuery(".btn-comment").show();
        jQuery(".view").show();
        a = g.get("offlineTasks");
        if (void 0 != a)for (var b = a.length, c = 0; c < b; c++)N(a[c], a[c].duration);
        g.set("offlineTasks", []);
        M = !1
    });
    var P;
    OB.init.add(function () {
        void 0 == g.get("qr") && g.set("qr", "true" == getQueryString("qr") || getQueryString("code"));
        Ma();
        jQuery(document).on("click", ".logout", function () {
            K()
        });
        q();
        var a = getQueryString("s"), b = getQueryString("d");
        if (b && (a && g.set("apiKey", a), a = b.split("."), g.set("host", a[0]), a.shift(), g.set("domain", a.join(".")), a = getQueryString("u"), b = g.get("userID"),
            void 0 == b || a && b && a != b)) {
            g.set("apiKey", "");
            g.set("username", "");
            g.set("password", "");
            g.set("userID", a);
            g.set("ent", void 0 != g.get("userID"));
            fa();
            return
        }
        O();
        !0 == g.get("qr") && void 0 == g.get("sessionID") && (getQueryString("code") ? (document.getElementById("button-appscan").style.display = "block", qrRead(getQueryString("code"), g)) : qrLoad(g))
    });
    OB.onBeforeUnLoad.add(function (a) {
        var b = TASK_CNTRL.getDuration(a);
        N(a, b.duration, !1)
    });
    OB.onUnLoad.add(function () {
        TASK_DB.running(function (a) {
            g.get("stopOnClose") &&
            TASK_CNTRL.stopTask(a)
        })
    });
    OB.onLoad.add(function () {
        document.addEventListener("resume", function () {
            jQuery("#loading").show();
            O() || q()
        }, !1);
        document.addEventListener("pause", function () {
            jQuery("#form-list").html("")
        }, !1);
        document.addEventListener("menubutton", function () {
                TASK_CNTRL.showWindow('<div style="text-align: center; font-weight: bold;"><h3>Welcome</h3></div><div class="content"><p>If you have any questions please visit <a href="http://store.atappstore.com/index.php/portfolio/stopwatch/" target="_blank" class="btn" >store.atappstore.com</a></p><a href="#" class="btn btn-primary cancel" title="Done">Done</a></div>')
            },
            !1)
    });
    OB.displayInterval.add(function (a, b) {
        p(a, b) && (window.clearInterval(TASK_CNTRL.display_intervals[a.ID]), J && window.clearInterval(TASK_CNTRL.update_intervals[a.ID]), TASK_CNTRL.toggleRunText())
    });
    OB.updateAtInterval.add(function (a, b) {
        g.get("updateAtInterval") && (0 == b ? n.hide() : (n.show(), N(a, b, !0), a.start = new Date, TASK_DB.setTask(a)))
    });
    OB.stop.add(function (a, b) {
        n.show();
        var c, h;
        c = new Date(a.start);
        h = new Date;
        f(u[1], "stop: " + c + " == " + h + " dur:" + b + " totalDuration:" + a.time);
        if (g.get("minuteBufferSnapToSched")) {
            var e =
                g.get("todaySched"), k = g.get("minuteBuffer"), p = h.toLocaleDateString("en-US"), q = Date.parse(p + e.start), e = Date.parse(p + e.stop), p = new Date(q);
            c < q && c > p.setMinutes(p.getMinutes() - k) && (c = new Date(q));
            p = new Date(e);
            h > e && h < p.setMinutes(p.getMinutes() + k) && (h = new Date(e));
            if (c >= h) {
                n.hide();
                return
            }
            b = Math.floor((h.getTime() - c.getTime()) / 1E3);
            f(u[1], "minuteBufferSnapToSched: " + c + " == " + h + " dur:" + b)
        }
        0 == b || 0 == Number((b / 3600).toFixed(2)) ? (n.hide(), TASK_DB.setTask(a)) : ("GEN" == a.details.objCode && jQuery("#item" + a.ID).find(".hour-note").show(),
            N(a, b, !1))
    });
    OB.update.add(function (a, b) {
        s.show();
        N(a, b, !1)
    });
    OB.start.add(function (a) {
        la(a)
    });
    OB.preStart.add(function (a) {
        a.running ? TASK_CNTRL.toggleTimer(a) : navigator.onLine && !a.disable && (p(a, a.time) || function () {
            TASK_DB.loadAll(function (b) {
                var c, f, e = !1, k = b.length;
                for (c = 0; c < k; c++)if (f = b[c], null != f && f.running && a.ID != f.ID) {
                    TASK_CNTRL.toggleTimer(f);
                    e = !0;
                    break
                }
                wa || a.details.project && a.details.project.hourTypes && a.details.project.hourTypes.length ? Ua(a, function (a) {
                    TASK_CNTRL.toggleTimer(a)
                }) : (TASK_CNTRL.toggleTimer(a),
                    !e && !0 == g.get("logout_on_select") && K())
            })
        }())
    });
    OB.postAllItemRender.add(function () {
        jQuery(".remove").css("display", "none");
        jQuery(".update").css("display", "none");
        jQuery(".reset").css("display", "none");
        g.get("is_auth") || (jQuery("#sort-date").remove(), jQuery(".timer").remove(), jQuery(".done").remove(), jQuery(".percent").remove(), jQuery(".btn-comment").remove(), jQuery(".hour-note").remove(), jQuery(".date").removeClass("date").addClass("date-tall").html('<a href="http://store.atappstore.com/index.php/portfolio/stopwatch/" target="_blank">Expired</a>'),
            jQuery("#licence").text("Expired"));
        g.get("hideTaskButtons") && (jQuery(".timer").addClass("timer-tall"), jQuery(".done").remove(), jQuery(".percent").remove(), jQuery(".task").remove(), jQuery(".view").remove(), jQuery(".date").remove(), jQuery(".btn-comment").remove(), jQuery(".hour-note").remove(), jQuery("#sort-date").remove());
        g.get("ent") ? (jQuery("#totalHours").attr("title", "").attr("data-hasqtip", !1).unbind("click").addClass("disabled"), g.get("projectFilter") || jQuery("#filter-projects").remove()) : (jQuery(".btn-comment").remove(),
            jQuery("#sort-order").remove(), jQuery(".hour-note").remove(), jQuery("#filter-projects").remove(), jQuery("#filter-onhold").remove());
        if (A) {
            var a = jQuery("#form-list"), b = g.get("vpos");
            void 0 != b && a.scrollTop(b);
            "team" == g.get("view") && !0 == g.get("hide_team_done") && jQuery(".done").remove();
            M ? g.get("allowOffline") && (jQuery(".done").remove(), jQuery(".percent").remove(), jQuery(".view").remove(), jQuery("#bar").hide()) : jQuery("#bar").show();
            b = g.get("current_sort");
            void 0 != b ? ("string" === typeof b && (b = JSON.parse(b)),
                B[b.sort] = b.order, b = b.sort) : (b = g.get("sort"), void 0 == b && (b = "date"));
            jQuery("#sort-" + b).click();
            jQuery("#search-bar").is(":visible") && jQuery("#search").click();
            jQuery("#loading").hide();
            a.show();
            a = jQuery("#holder")[0];
            a.style.display = "none";
            a.style.display = "block";
            n.hide();
            A = !1
        }
    });
    OB.postItemRender.add(function (a) {
        var b = jQuery("#item" + a.ID), c = b.find(".details");
        if (0 == b.find("#buttons .view").length) {
            var f = b.find("#buttons"), e = ["", {label: "Low", css: "default"}, {label: "Normal", css: "success"}, {label: "High",
                css: "warning"}, {label: "Urgent", css: "danger"}];
            "GEN" != a.details.objCode && (void 0 != a.details.priority && 0 != a.details.priority) && (e = e[a.details.priority], f.append('<span class="task priority ' + e.css + '" title="' + e.label + '" data-priority="' + a.details.priority + '">' + e.label[0] + "</span> "));
            var k;
            "GEN" == a.details.objCode ? (k = "General", b.attr("data-type", k), b.attr("data-force-order", 0), f.attr("class", "days priority"), b.attr("class", "item general")) : "OPTASK" == a.details.objCode ? (k = "Issue", b.attr("data-type", k),
                b.attr("data-force-order", 1), f.append('<span class="issue" title="Issue">I</span> ')) : "TASK" == a.details.objCode ? (k = "Task", b.attr("data-type", k), b.attr("data-force-order", 1), f.append('<span class="task" title="Task">T</span> ')) : "PROJ" == a.details.objCode && (k = "Project", b.attr("data-type", k), b.attr("data-force-order", 1), f.append('<span class="project" title="Project">P</span> '));
            void 0 != a.details.status && (c.attr("data-status", a.details.status), f.append('<span class="status" title="' + k + " status: " + a.details.status +
                ("Project" !== k ? "<br>Project status: " + a.details.project.status : "") + '">' + a.details.status + "</span> "));
            "General" != k && (f.append('<a href="https://' + g.get("host") + "." + g.get("domain") + "/" + k.toLowerCase() + "/view?ID=" + a.syncID + '" target="_blank" class="btn btn-mini view" rel="' + a.ID + '" title="View ' + k + '"><i class="fas fa-tasks"></i></a> '), a.disable ? void 0 != a.details.status && (b.find(".timer").text("status: " + a.details.status).unbind("click").addClass("disabled"), b.find(".timer-info").text("status: " + a.details.status)) :
                "Project" != k && f.append('<a href="#" class="btn btn-mini done" rel="' + a.ID + '" title="Done ' + k + '"><i class="fas fa-check"></i></a> '));
            "General" != k && f.append('<a href="#" class="btn btn-mini btn-comment" rel="' + a.ID + '" title="Add Comment"><i class="fas fa-comment-dots"></i></a> ');
            !a.disable && void 0 != a.details.percentComplete && ("Task" == k ? f.append('<a href="#" class="btn btn-mini percent" rel="' + a.ID + '" title="Percent Completed">' + a.details.percentComplete + "%</a> ") : "Project" == k && f.append('<span class="btn-mini" rel="' +
                a.ID + '" title="Percent Completed">' + a.details.percentComplete + "%</span> "));
            f = '<span class="date" style="background-color: #EEE;"></span>';
            if (!a.disable && "General" != k && void 0 != a.details.plannedCompletionDate)if (e = a.details.plannedCompletionDate.replace(/:\d\d\d/, "").replace(/-/g, "/").replace(/[a-z]+/gi, " ").replace(/\/(\d\d\d\d)/, "-$1"), e = new Date(Date.parse(e)), isNaN(e.getTime()))c.attr("data-days", 9999); else {
                var p = new Date;
                p.setHours(0);
                p.setMinutes(0);
                p.setSeconds(0);
                f = "#D2E0FF";
                p = Math.round((e.getTime() -
                    p.getTime()) / 1E3 / 60 / 60 / 24);
                0 > p ? f = "#FFCDCD" : 1 >= p && (f = "#FFD7AB");
                var q;
                q = 0 < p ? "days due: " + p : "days late: " + Math.abs(p);
                f = '<div class="date" style="background-color: ' + f + ';"><div class="days">' + q + "</div><div>" + ga(e.getMonth()) + " " + e.getDate() + ", " + e.getFullYear() + "</div></div>";
                c.attr("data-days", p)
            } else c.attr("data-days", 9999);
            e = "";
            null != a.details.parent && (e = "<br><br>Parent Task: <br>" + a.details.parent.name);
            p = "";
            a.details.extRefID && (p = "Reference: <br>" + a.details.extRefID);
            b.find(".name").attr("title",
                k + ": <br>" + a.name + p + e);
            "General" != k ? (k = "Project" == k ? "" : a.details.project.name, c.html(k).attr("title", "Project: <br>" + k + "<br>Status: " + a.details.project.status).attr("data-priority", a.details.priority), c = "", a.disable || (c = '<span class="hour-note" rel="' + a.ID + '">Add Note</span>'), b.find(".c6").after('<div class="task-lower-block">' + f + c + "</div>")) : (c.html(a.details.description).attr("title", a.details.description), c = a.time ? "block" : "hidden", b.find(".c6").after('<div class="general-lower-block"><span class="hour-note" style="display:' +
                c + ';" rel="' + a.ID + '">Add Note</span></div>'));
            E || b.find(".task-lower-block").mouseover(function () {
                var a = jQuery(this).find(".hour-note"), b = a.attr("rel");
                jQuery("#item" + b);
                if ((b = TASK_DB.get(b)) && b.time && !b.running && !b.disable) {
                    var c = jQuery(this).find(".date").hide(), f = a.show();
                    setTimeout(function () {
                        c.show();
                        f.hide()
                    }, 3E3)
                }
            }).mouseout(function () {
                jQuery(this).find(".date").show();
                jQuery(this).find(".hour-note").hide()
            })
        }
    });
    OB.remove.add(function (a) {
        jQuery("#item" + a).remove()
    });
    OB.reset.add(function (a, b) {
        OB.update.dispatch(b, -b.time);
        jQuery("#item" + a + " .timer").text(TASK_CNTRL.hms(0))
    });
    var A = !1, s, n
}();
var QUERY_LOOKUP = null;
function getQueryString(c) {
    if (null == QUERY_LOOKUP) {
        var k = location.search.substring(1), e = /([^&=]+)=([^&]*)/g, m;
        for (QUERY_LOOKUP = {}; m = e.exec(k);)QUERY_LOOKUP[decodeURIComponent(m[1])] = decodeURIComponent(m[2])
    }
    return c in QUERY_LOOKUP ? QUERY_LOOKUP[c] : null
}
function isMobile() {
    var c = !1, k = navigator.userAgent || navigator.vendor || window.opera;
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(k) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(k.substr(0,
        4)))c = !0;
    return c
}
function taskController(c) {
    var k, e = window.hasOwnProperty("chrome") && window.chrome.hasOwnProperty("windows"), m = !e && isMobile();
    OB.start.add(function (c) {
        startNotify(c)
    });
    OB.stop.add(function (c, e, k) {
        stopNotify(c)
    });
    OB.onLoad.add(function () {
    });
    OB.postAllItemRender.add(function () {
        m && (jQuery("#form-list").height(0), k = 124);
        if (!e || "full" == getQueryString("view")) {
            var c = function () {
                var c = jQuery("#form-list"), f;
                f = c.height();
                f += window.innerHeight - k;
                0 != window.innerHeight - k && c.height(f);
                k = window.innerHeight
            };
            jQuery(window).unbind("resize");
            jQuery(window).bind("resize", c);
            c()
        }
        var q = !1, c = {style: {tip: {corner: !0, width: 5, height: 5}, def: !1, classes: "qtip-info"}, position: {adjust: {method: "flip flip"}, at: "bottom left", my: "top left", viewport: jQuery(window)}, show: {}, events: {show: function (c, f) {
            q = !0
        }}, hide: {delay: m ? 0 : 100}};
        jQuery("span[title]").qtip(c);
        jQuery("#form-list").bind("scroll", function () {
            q && (jQuery("span[title]").qtip("hide"), q = !1)
        });
        m || (jQuery("a[title]").qtip(c), jQuery("#form-list").bind("scroll", function () {
            q && (jQuery("a[title]").qtip("hide"),
                q = !1)
        }));
        c.content = "time < 30 seconds<br> time was not tracked";
        c.show.event = !1;
        var p = jQuery(".timer");
        p.qtip(c);
        m || p.mouseover(function () {
            var c = jQuery(this).find(".time").hide(), f = jQuery(this).find(".timer-info").show();
            setTimeout(function () {
                c.show();
                f.hide()
            }, 3E3)
        }).mouseout(function () {
            jQuery(this).find(".time").show();
            jQuery(this).find(".timer-info").hide()
        });
        m && (jQuery(".item").css("padding-right", "5px"), jQuery(".task").css("padding-right", "5px").css("padding-left", "5px"), jQuery(".issue").css("padding-right",
            "5px").css("padding-left", "5px"), jQuery("body").css("font-size", "12px"));
        jQuery("#searchfor").domsearch("#form-list", {unit: "div.item:visible", criteria: ["span[oldtitle]"]})
    });
    return{display_intervals: [], update_intervals: [], taskDB: c, init: function () {
        var c = this;
        this.bind();
        this.toggleRunText();
        var q = jQuery("#form-list");
        !e || "full" == getQueryString("view") ? q.addClass("full") : q.css("max-height", "439px");
        !e && (window.webkitNotifications && 0 != window.webkitNotifications.checkPermission()) && window.open("core/js/permission.html",
            "Permission", "height=540,width=447");
        k = 567;
        sortable("#form-list", {forcePlaceholderSize: !0, items: ".item", handle: ".handle"});
        sortable("#form-list", "disable");
        sortable("#form-list")[0].addEventListener("sortupdate", function (e) {
            var k = c.taskDB.get(jQuery(e.detail.item).attr("rel"));
            k.order = e.detail.destination.index + 1;
            c.taskDB.setTask(k)
        })
    }, bind: function () {
        if (m)jQuery(document).on("click", "a[target='_blank']", function (c) {
            c.preventDefault();
            window.open(jQuery(this).attr("href"), "_blank", "location=yes");
            return!1
        });
        jQuery("#cover").hide();
        jQuery(document).on("click", ".cancel", function (e) {
            e.preventDefault();
            jQuery("#" + jQuery(this).attr("rel")).hide().hide().find("input:text").val("");
            jQuery("#form-list").show();
            jQuery("#top-bar").show();
            jQuery("#bar").show();
            c.hideWindow()
        });
        jQuery(document).on("click", "#search", function (c) {
            c.preventDefault();
            jQuery("#sort-bar").toggle();
            jQuery("#search-bar").toggle();
            jQuery("#searchfor").focus().val("").domsearchClear()
        });
        jQuery(document).on("click", "#popout", function (c) {
            c.preventDefault();
            e && window.chrome.windows.create({url: "index.html?view=full", type: "popup", width: 450, height: 600})
        });
        jQuery(document).on("click", "#create", function (c) {
            c.preventDefault();
            jQuery(".form").hide();
            jQuery("#form-create").slideDown().find("input[name='task-name']").focus()
        });
        var c = this;
        jQuery(document).on("click", "#button-create", function () {
            var e = jQuery("#form-create");
            c.taskDB.insert(e.find(":input[name='task-name']").val());
            e.hide().find("input:text").val("")
        });
        jQuery("#task-name").keydown(function (e) {
            13 ==
                e.keyCode && (e = jQuery("#form-create"), c.taskDB.insert(e.find(":input[name='task-name']").val()), e.hide().find("input:text").val(""))
        });
        jQuery(document).on("click", ".remove", function (c) {
            c.preventDefault();
            jQuery(".form").hide();
            jQuery("#button-remove").attr("rel", jQuery(this).attr("rel"));
            jQuery("#remove-confirm").html("Are you sure? You want to <strong>delete " + jQuery(this).attr("title") + "</strong>?");
            jQuery("#form-remove").show()
        });
        jQuery(document).on("click", "#button-remove", function () {
            jQuery("#form-remove").hide();
            c.taskDB.remove(jQuery(this).attr("rel"))
        });
        jQuery(document).on("click", "#remove-all", function (c) {
            c.preventDefault();
            jQuery(".form").hide();
            jQuery("#form-remove-all").slideDown()
        });
        jQuery(document).on("click", "#button-remove-all", function () {
            jQuery("#form-remove-all").hide();
            c.taskDB.removeall()
        });
        jQuery(document).on("click", ".update", function (c) {
            c.preventDefault();
            jQuery(".form").hide();
            jQuery("#top-bar").hide();
            jQuery("#bar").hide();
            this.taskDB.updateValidate(jQuery(this).attr("rel"), this.update)
        });
        jQuery(document).on("click", "#button-update", function () {
            var e = jQuery("#form-update");
            e.hide();
            jQuery("#top-bar").show();
            jQuery("#bar").show();
            c.taskDB.update(e.find(":input[name='task-id']").val(), e.find(":input[name='task-name']").val(), e.find(":input[name='task-time']").val())
        });
        jQuery(document).on("click", ".reset", function (e) {
            e.preventDefault();
            e = jQuery(this).attr("rel");
            c.taskDB.reset(e)
        });
        var k = function (e) {
            e.preventDefault();
            c.taskDB.updateValidate(jQuery(this).attr("rel"), function (c) {
                OB.preStart.dispatch(c)
            });
            return!1
        };
        jQuery(document).on("click", ".timer", k);
        jQuery("#running").click(k);
        jQuery("#holder").show()
    }, isMobile: m, displayError: function (c) {
        this.showWindow('<h3><div style="text-align: center; font-weight: bold;">Error</div></h3><div class="content"><p>' + c + '</p><a href="#" id="cancel_confirm" class="btn btn-primary" title="Done">Done</a></div>')
    }, showWindow: function (c, e) {
        var k = jQuery("#cover");
        e = void 0 == e ? "#window" : e;
        null != c && jQuery(e).html(c);
        m ? (k.css("height", "100%").css("opacity", "0.8").show(),
            jQuery(e).animate({top: 60 + window.pageYOffset + "px"}, {easing: "easeInCubic", duration: 400, complete: function () {
            }})) : k.css("height", "100%").show().animate({opacity: "0.8"}, 400, function () {
            jQuery(e).animate({top: 60 + window.pageYOffset + "px"}, {easing: "easeInCubic", duration: 400, complete: function () {
            }})
        })
    }, hideWindow: function (c) {
        var e = jQuery("#cover");
        c = void 0 == c ? "#window" : c;
        m ? jQuery(c).animate({top: "-700px"}, {easing: "easeOutCubic", duration: 400, complete: function () {
            e.hide()
        }}) : jQuery(c).animate({top: "-700px"}, {easing: "easeOutCubic",
            duration: 400, complete: function () {
                e.animate({opacity: "0"}, {duration: 400, complete: function () {
                    e.hide()
                }})
            }})
    }, update: function (c) {
        var e = jQuery("#form-update");
        e.find(":input[name='task-id']").val(c.ID);
        e.find(":input[name='task-name']").val(c.name);
        e.find(":input[name='task-time']").val(this.hms(c.time));
        e.slideDown()
    }, truncateString: function (c) {
        return c
    }, showTask: function (c) {
        var e, k = "";
        e = jQuery("#item" + c.ID);
        0 != e.length ? e.show() : (k += '<div class="item' + (c.running ? " running" : "") + '" id="item' + c.ID + '" rel="' +
            c.ID + '">', k += '<div class="handle" title="drag to order tasks"></div><div class="c3">', k += '<span class="name c1" title="Task: <br>' + c.name + '" ><strong>' + this.truncateString(c.name) + "</strong></span><br>", k += '<span class="details" title="' + c.details + '" data-order="' + (c.order ? c.order : 1E3) + '">' + this.truncateString(c.details) + "</span><br>", k += '<span id="buttons"><a href="#" class="btn btn-mini update" rel="' + c.ID + '" title="Edit: ' + c.name + '">Edit</a> ', k += '<a href="#" class="btn btn-mini reset" rel="' +
            c.ID + '" title="Reset: ' + c.name + '">Reset</a> ', k += '<a href="#" class="btn btn-mini remove" rel="' + c.ID + '" title="Delete: ' + c.name + '">Delete</a></span>', k += "</div>", k += '<div class="c8"><div class="c6">', c.running ? (e = new Date(c.start), e = Number(c.time) + Math.floor(((new Date).getTime() - e.getTime()) / 1E3), k += '<a href="#" class="btn timer btn-primary" rel="' + c.ID + '"><span class="time">' + this.hms(e) + "</span>") : k += '<a href="#" class="btn timer ' + (c.disable ? "disabled" : "") + '" rel="' + c.ID + '"><span class="time">' +
            this.hms(c.time) + "</span>", k += '<span class="timer-info" style="display: none;">' + (c.running ? "Stop" : c.disable ? "Max Reached" : "Start") + "</span></a>", k += "</div>", k += "</div></div>", c.running && (this.startTask(c), this.toggleRunText()), jQuery("#form-list").append(k), OB.postItemRender.dispatch(c))
    }, showAll: function (c) {
        if (void 0 != c) {
            var e, k = c.length;
            if (0 != k)for (e = 0; e < k; e++)this.showTask(c[e])
        }
        0 == jQuery(".item").length && this.showNoTaskWindow();
        OB.postAllItemRender.dispatch()
    }, showNoTaskWindow: function () {
        jQuery("#form-list").css("height",
            "439px");
        this.showWindow('<h3><div style="text-align: center; font-weight: bold;">No Tasks</div></h3><div class="content"><p>Please assign a task to yourself.</p><a href="#" id="cancel_confirm" class="btn btn-primary cancel" title="Done">Done</a></div>')
    }, toggleTimer: function (c) {
        jQuery("#item" + c.ID + " .timer").toggleClass("btn-primary");
        c.running ? this.stopTask(c) : this.startTask(c);
        this.toggleRunText()
    }, startTask: function (c) {
        if (navigator.onLine) {
            var k = this, m = jQuery("#item" + c.ID), z = new Date;
            m.find(".timer .timer-info").text("Stop");
            window.clearInterval(k.display_intervals[c.ID]);
            e || window.clearInterval(k.update_intervals[c.ID]);
            c.running ? z = new Date(c.start) : this.taskDB.start(c.ID, z);
            k.display_intervals[c.ID] = window.setInterval(function () {
                var e = Number(c.time) + Math.floor(((new Date).getTime() - z.getTime()) / 1E3);
                jQuery("#item" + c.ID).find(".timer .time").text(k.hms(e));
                OB.displayInterval.dispatch(c, e)
            }, 500);
            e || (k.update_intervals[c.ID] = window.setInterval(function () {
                navigator.onLine && k.taskDB.updateAtInterval(c.ID, Number(c.time) +
                    Math.floor(((new Date).getTime() - z.getTime()) / 1E3), 300)
            }, 3E5))
        }
    }, stopTask: function (c) {
        var k = jQuery("#item" + c.ID), m = this.getDuration(c), z = Number(c.time), k = k.find(".timer"), z = c.interval ? m : z + m;
        window.clearInterval(this.display_intervals[c.ID]);
        e || window.clearInterval(this.update_intervals[c.ID]);
        this.taskDB.stop(c.ID, z, m, c.done);
        0 == m && k.qtip("show");
        k.find(".time").text(this.hms(z));
        k.find(".timer-info").text("Start")
    }, getDuration: function (c) {
        c = new Date(c.start);
        c = Math.floor(((new Date).getTime() - c.getTime()) /
            1E3);
        30 > c ? c = 0 : 60 > c && 29 < c && (c = 60);
        return c
    }, toggleRunText: function () {
        var c = jQuery("#running"), k = jQuery(".bar-text");
        this.taskDB.running(function (m) {
            e ? window.chrome.browserAction.setBadgeText({text: "RUN"}) : document.title = "Stopwatch - Running: " + m.name;
            c.text("Running: " + m.name).attr("rel", m.ID).show();
            k.hide()
        }, function (m) {
            0 == m && (e ? window.chrome.browserAction.setBadgeText({text: ""}) : document.title = "Stopwatch", c.hide(), k.show())
        })
    }, hms: function (c) {
        c = [0, 0, c];
        var e;
        for (e = 2; 0 < e; e--)c[e - 1] = Math.floor(c[e] /
            60), c[e] %= 60, 10 > c[e] && (c[e] = "0" + c[e]);
        return c.join(":")
    }, sec: function (c) {
        c = String(c).split(":");
        return Number(parseFloat(3600 * c[0]) + 60 * parseFloat(c[1]) + parseFloat(c[2]))
    }}
};
function taskDB() {
    return{dm: [], log: [], lastId: 0, sql: function (c, k, e, m, f, q) {
    }, init: function () {
        this.createDB();
        return this
    }, setEvent: function (c, k) {
        var e = this.log;
        20 == e.length && e.shift();
        e.push({type: c, message: k, time: (new Date).getTime()});
        this.log = e
    }, getEvents: function () {
        return this.log
    }, onError: function (c) {
    }, createDB: function () {
        this.dm = [];
        this.lastId = 0
    }, dropTaskTable: function () {
        this.createDB()
    }, get: function (c) {
        return this.dm[c]
    }, start: function (c, k) {
        this.dm[c].running = 1;
        this.dm[c].start = k;
        OB.start.dispatch(this.dm[c])
    },
        updateAtInterval: function (c, k, e) {
            this.dm[c].running = 1;
            this.dm[c].time = Number(k);
            this.dm[c].interval = 1;
            OB.updateAtInterval.dispatch(this.dm[c], Number(e))
        }, stop: function (c, k, e, m) {
            c = this.dm[c];
            c.running = 0;
            c.interval = 0;
            c.done = m;
            c.time = Number(k);
            OB.stop.dispatch(c, Number(e))
        }, setTask: function (c) {
            this.dm[c.ID] = c
        }, running: function (c, k) {
            for (var e in this.dm)if (null != this.dm[e] && this.dm[e].running)return c(this.dm[e]), !0;
            k();
            return!1
        }, insert: function (c, k, e) {
            var m = "null", f = "", q = 0;
            void 0 != k && (void 0 != k.syncID &&
                (m = k.syncID), void 0 != k.details && (f = k.details), void 0 != k.disable && (q = k.disable));
            if ("null" != m) {
                k = !1;
                for (var p in this.dm)if (null != this.dm[p] && this.dm[p].syncID == m) {
                    k = !0;
                    break
                }
                k || (p = this.nextID(), this.dm[p] = {ID: p, syncID: m, name: c, details: f, time: 0, start: new Date, running: 0, done: 0, disable: q, interval: !1, order: 1E3}, OB.insert.dispatch(c, {syncID: m, details: f}));
                TASK_CNTRL.showTask(this.dm[p]);
                e && OB.postAllItemRender.dispatch()
            }
        }, nextID: function () {
            return this.lastId++
        }, updateValidate: function (c, k) {
            null != this.dm[c] &&
            k(this.dm[c])
        }, update: function (c, k, e) {
            e = TASK_CNTRL.sec(e);
            var m;
            null != this.dm[c] && (this.dm[c].name = k, m = this.dm[c].time, this.dm[c].time = e);
            OB.update.dispatch(this.dm[c], e - m)
        }, updateDetails: function (c, k) {
            null != this.dm[c] && (this.dm[c].details = k)
        }, remove: function (c) {
            this.dm[c] = null;
            void 0 != TASK_CNTRL.update_intervals[c] && window.clearInterval(TASK_CNTRL.update_intervals[c]);
            void 0 != TASK_CNTRL.display_intervals[c] && window.clearInterval(TASK_CNTRL.display_intervals[c]);
            OB.remove.dispatch(c)
        }, removeall: function () {
            this.createDB();
            for (var c in TASK_CNTRL.update_intervals)window.clearInterval(TASK_CNTRL.update_intervals[c]);
            for (c in TASK_CNTRL.display_intervals)window.clearInterval(TASK_CNTRL.display_intervals[c]);
            OB.removeall.dispatch()
        }, reset: function (c) {
            null != this.dm[c] && (OB.reset.dispatch(c, this.dm[c]), this.dm[c].time = 0)
        }, loadAll: function (c) {
            c(this.dm)
        }}.init()
};
function taskDBls() {
    return{ls: null, ps: null, log: null, userId: null, sql: function (c, k, e, m, f, q) {
    }, init: function () {
        this.ps = new Store("AttaskPersistModel");
        this.log = new Store("StopwatchLog");
        null == this.log.get("trace") && this.log.set("trace", []);
        this.ls = new Store("AttaskModel");
        null == this.ls.get("list") && this.createDB();
        return this
    }, setEvent: function (c, k) {
        var e = this.log.get("trace");
        20 == e.length && e.shift();
        e.push({type: c, message: k, time: (new Date).getTime()});
        this.log.set("trace", e)
    }, getEvents: function () {
        return this.log.get("trace")
    },
        onError: function (c) {
        }, createDB: function () {
            this.ls.set("lastId", 0);
            this.ls.set("list", [])
        }, dropTaskTable: function () {
            this.ls.removeAll()
        }, userRunningTasks: function (c) {
            return this.ps.get(c + "" + this.ps.get(c))
        }, start: function (c, k) {
            var e = this.ls.get(c);
            null != e && void 0 != e && (e.running = 1, e.start = k, this.ls.set(c, e), null != this.userId && (this.ps.set(this.userId + "" + e.syncID, e), this.ps.set(this.userId, e.syncID)), OB.start.dispatch(e))
        }, updateAtInterval: function (c, k, e) {
            var m = this.ls.get(c);
            null != m && void 0 != m && (m.time =
                Number(k), m.running = 1, m.interval = 1, this.ls.set(c, m), OB.updateAtInterval.dispatch(m, Number(e)))
        }, stop: function (c, k, e, m) {
            c = this.ls.get(c);
            null != c && void 0 != c && (c.running = 0, c.interval = 0, c.done = m, c.time = Number(k), null != this.userId && (this.ps.remove(this.userId + "" + c.syncID), this.ps.remove(this.userId)), OB.stop.dispatch(c, Number(e)))
        }, setTask: function (c) {
            this.ls.set(c.ID, c)
        }, running: function (c, k) {
            var e = this.ls.get("list"), m, f = 0, q;
            for (q in e)e.hasOwnProperty(q) && (m = this.ls.get(q), null != m && (void 0 != m && m.running) &&
                (void 0 != c && c(m), f++));
            void 0 != k && k(f);
            return 0 != f
        }, getAllRunning: function () {
            return this.ps.toObject()
        }, insert: function (c, k, e) {
            var m = this, f = "null", q = "", p = 0;
            void 0 != k && (void 0 != k.syncID && (f = k.syncID), void 0 != k.details && (q = k.details), void 0 != k.disable && (p = k.disable));
            k = function (c, e, f, k, p) {
                var q = m.nextID();
                p = {ID: q, syncID: c, name: e, details: f, time: 0, start: new Date, running: 0, disable: p, interval: !1, order: 1E3};
                if (null != m.userId) {
                    var z = m.ps.get(m.userId + "" + c);
                    null != z && z.running && (p = z)
                }
                m.ls.set(q, p);
                z = m.ls.get("list");
                z[q] = c;
                m.ls.set("list", z);
                OB.insert.dispatch(e, {syncID: c, details: f});
                TASK_CNTRL.showTask(p);
                k && OB.postAllItemRender.dispatch()
            };
            if ("null" != f) {
                var z = m.ls.get("list"), O = !1, C;
                for (C in z)if (z.hasOwnProperty(C) && null != z[C] && z[C] == f) {
                    O = !0;
                    break
                }
                O ? (f = m.ls.get(C), f.name = c, q && Object.assign(f.details, q), m.ls.set(C, f), TASK_CNTRL.showTask(f), e && OB.postAllItemRender.dispatch()) : k(f, c, q, e, p)
            } else k(f, c, q, e, p)
        }, nextID: function () {
            var c = this.ls.get("lastId");
            c++;
            this.ls.set("lastId", c);
            return c
        }, updateValidate: function (c, k) {
            var e = this.ls.get(c);
            null != e && void 0 != e && k(e)
        }, get: function (c) {
            return this.ls.get(c)
        }, update: function (c, k, e) {
            e = TASK_CNTRL.sec(e);
            c = this.ls.get(c);
            null != c && void 0 != c && (c.name = k, k = c.time, c.time = e, OB.update.dispatch(c, e - k))
        }, updateDetails: function (c, k) {
            var e = this.ls.get(c);
            null != e && void 0 != e && (e.details = k, this.ls.set(c, e))
        }, remove: function (c) {
            var k = this.ls.get("list");
            k[c] = null;
            this.ls.set("list", k);
            this.ls.remove(c);
            void 0 != TASK_CNTRL.update_intervals[c] && window.clearInterval(TASK_CNTRL.update_intervals[c]);
            void 0 != TASK_CNTRL.display_intervals[c] && window.clearInterval(TASK_CNTRL.display_intervals[c]);
            OB.remove.dispatch(c)
        }, removeall: function () {
            this.createDB();
            for (var c in TASK_CNTRL.update_intervals)window.clearInterval(TASK_CNTRL.update_intervals[c]);
            for (c in TASK_CNTRL.display_intervals)window.clearInterval(TASK_CNTRL.display_intervals[c]);
            OB.removeall.dispatch()
        }, reset: function (c) {
            var k = this.ls.get(c);
            null != k && void 0 != k && (OB.reset.dispatch(c, k), k.time = 0, this.ls.set(c, k))
        }, loadAll: function (c) {
            var k =
                this.ls.get("list"), e = [], m, f;
            for (f in k)k.hasOwnProperty(f) && (m = this.ls.get(f), null != m && void 0 != m && e.push(m));
            c(e)
        }, loadSyncIds: function (c) {
            for (var k = this.ls.get("list"), e = [], m, f = c.length, q = 0; q < f; q++)m = k.indexOf(c[q]), -1 != m && (m = this.ls.get(m), null != m && void 0 != m && e.push(m));
            return e
        }}.init()
};
var TASK_DB, IS_WEB = !(window.hasOwnProperty("chrome") && window.chrome.hasOwnProperty("windows"));
TASK_DB = !IS_WEB || -1 === document.URL.indexOf("http://") && -1 === document.URL.indexOf("https://") ? taskDBls() : lscheck() ? taskDBls() : taskDB();
var TASK_CNTRL = taskController(TASK_DB);
Offline.options = {interceptRequests: !1, requests: !1, checks: {image: {url: "https://www.atappstore.com/client/enterprise-stopwatch/icons/timer32x32.png"}, active: "image"}};
jQuery(function () {
    TASK_CNTRL.init();
    OB.init.dispatch()
});
function onLoad() {
    OB.onLoad.dispatch()
}
window.addEventListener("beforeunload", function (c) {
    console.log("beforeunload");
    if (IS_WEB && TASK_DB.running(function (c) {
        OB.onBeforeUnLoad.dispatch(c)
    }))return(c || window.event).returnValue = "Stopwatch has a task running, are you sure?"
});
window.addEventListener("unload", function (c) {
    console.log("unload");
    OB.onUnLoad.dispatch()
});
function lscheck() {
    try {
        return localStorage.setItem("stopwatch", "stopwatch"), localStorage.removeItem("stopwatch"), !0
    } catch (c) {
        return!1
    }
};
var interval, notifyWorkIntervalTime = 30;
function startNotify(c) {
    interval = setInterval(function () {
        notifyWorking(c)
    }, 6E4 * notifyWorkIntervalTime)
}
function stopNotify() {
    clearInterval(interval)
}
function notifyWorking(c) {
    if (window.webkitNotifications) {
        var k = webkitNotifications.createNotification("../icons/timer48x48.png", "Still working on Task:", c.name + "\n" + c.details.split(", Due:")[0]);
        k.show();
        setTimeout(function () {
            k.cancel()
        }, 7E3)
    } else stopNotify()
}
function notifyFriday() {
    var c = webkitNotifications.createNotification("icons/timer48x48.png", "Remember: Submit Timesheet!", "");
    c.show();
    setTimeout(function () {
        c.cancel()
    }, 7E3)
};
